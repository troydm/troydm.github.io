<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Troydm's Blog]]></title>
  <link href="http://troydm.github.io/atom.xml" rel="self"/>
  <link href="http://troydm.github.io/"/>
  <updated>2014-11-15T01:36:00+04:00</updated>
  <id>http://troydm.github.io/</id>
  <author>
    <name><![CDATA[Dmitry Geurkov]]></name>
    <email><![CDATA[d.geurkov@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rewriting Micro Compiler in OCaml using ocamllex and ocamlyacc]]></title>
    <link href="http://troydm.github.io/blog/2014/11/14/rewriting-micro-compiler-in-ocaml-using-ocamllex-and-ocamlyacc/"/>
    <updated>2014-11-14T22:58:29+04:00</updated>
    <id>http://troydm.github.io/blog/2014/11/14/rewriting-micro-compiler-in-ocaml-using-ocamllex-and-ocamlyacc</id>
    <content type="html"><![CDATA[<p>In <a href="http://troydm.github.io/blog/2014/03/29/writing-micro-compiler-in-ocaml/">my previous post</a> I&rsquo;ve talked about writing micro compiler in OCaml under 300 lines of source code. There are number of ways to make our work easier and number of source code lines significantly smaller.</p>

<p><img src="http://i.imgur.com/2q3i5KA.gif" alt="Potato Loli" /></p>

<p>Let&rsquo;s rewrite our micro compiler using tools called <em>lexer</em> and <em>parser</em> generators. We&rsquo;ll be using tools called <strong>ocamllex</strong> and <strong>ocamlyacc</strong> which are distributed with <em>OCaml</em> compiler and are modeled after
famous <strong>lex</strong> and <strong>yacc</strong> tools for <em>Unix</em> operating systems. Those tools actually have better modern analogues called <strong>flex</strong> and <strong>bison</strong> which are described in detail in <a href="http://www.amazon.com/flex-bison-Text-Processing-Tools/dp/0596155972/">Flex &amp; Bison: Text Processing Tools</a> book.
Nowadays however if you are writing a professional compiler in <em>OCaml</em> I strongly suggest you consider using <a href="https://github.com/alainfrisch/sedlex">sedlex</a> and <a href="http://gallium.inria.fr/~fpottier/menhir/">menhir</a> instead of <strong>ocamllex</strong> and <strong>ocamlyacc</strong> as both tools are quite outdated and
lack some significant features that their modern analogues have such as unicode support for lexing, parameterized parser generation and built-in grammar interpreter. So what are lexer and parser generators?
To put it simply <strong>ocamllex</strong> and <strong>ocamlyacc</strong> take special <em>.mll</em> and <em>.mly</em> definition files of lexer and parser semantics mixed with <em>OCaml</em> source code and generate an <em>.ml</em> source code files that do the actual token generation and parsing for you.
Pretty neat indeed, and it&rsquo;s actually easier to use than it sounds so let&rsquo;s rewrite our micro compiler using those tools. We&rsquo;ll be using original source code of micro compiler as reference only as entire code base needs to be changed. You can see the end result of our rewrite in <a href="https://github.com/troydm/micro/tree/simple">micro</a> git repository branch called <em>simple</em>. For the actual description of the micro language see my previous post. So let&rsquo;s get started!</p>

<!--more-->


<p>First let&rsquo;s create our files for lexer and parser called <em>lexer.mll</em> and <em>parser.mly</em>. Now let&rsquo;s define our tokens in <em>parser.mly</em>. As you can see it&rsquo;s defined
using special syntax that is described in <a href="http://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html">ocamlyacc manual</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">BEGIN</span> <span class="nc">END</span> <span class="nc">EOF</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span> <span class="nc">IDENTIFIER</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="nc">LITERAL</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">READ</span> <span class="nc">WRITE</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">ASSIGN</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">LEFTPAREN</span> <span class="nc">RIGHTPAREN</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">ADDOP</span> <span class="nc">SUBOP</span>
</span><span class='line'><span class="o">%</span><span class="n">token</span> <span class="nc">COMMA</span> <span class="nc">SEMICOLON</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s define lexical semantics for those tokens in <em>lexer.mll</em> file. The tokens we defined in parser.mly will be generated into <em>parser.mli</em> interface
file so first of all let&rsquo;s include those from parser module by adding a header to <em>lexer.mll</em> file. The part between <em>{</em> and <em>}</em> is defined in <em>OCaml</em> syntax
and will be translated into the generated lexer.ml file without any changes. For the description of <em>ocamllex</em> definition file consult it&rsquo;s <a href="http://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html">manual</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Parser</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next let&rsquo;s define some lexical semantics next for blank characters, digits and alpha numerical characters. As you can see those are defined using
regular expression syntax and can be referencing each other. This way we can define identifier lexical semantics by just referencing alpha and digit definitions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">blank</span> <span class="o">=</span> <span class="o">[</span><span class="sc">&#39; &#39;</span> <span class="sc">&#39;\r&#39;</span> <span class="sc">&#39;\t&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">digit</span> <span class="o">=</span> <span class="o">[</span><span class="sc">&#39;0&#39;</span><span class="o">-</span><span class="sc">&#39;9&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">digits</span> <span class="o">=</span> <span class="n">digit</span><span class="o">*</span>
</span><span class='line'><span class="k">let</span> <span class="n">alpha</span> <span class="o">=</span> <span class="o">[</span><span class="sc">&#39;a&#39;</span><span class="o">-</span><span class="sc">&#39;z&#39;</span> <span class="sc">&#39;A&#39;</span><span class="o">-</span><span class="sc">&#39;Z&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">iden</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">(</span><span class="n">alpha</span> <span class="o">|</span> <span class="n">digit</span> <span class="o">|</span> <span class="sc">&#39;_&#39;</span><span class="o">)*</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s define a rule that will give us the actual tokens. As you can see the part between <em>{</em> and <em>}</em> is in <em>OCaml</em> syntax and just gives us back the tokens we&rsquo;ve defined.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">rule</span> <span class="n">micro</span> <span class="o">=</span> <span class="n">parse</span>
</span><span class='line'>    <span class="o">|</span> <span class="s2">&quot;:=&quot;</span>     <span class="o">{</span> <span class="nc">ASSIGN</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;+&#39;</span>      <span class="o">{</span> <span class="nc">ADDOP</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;-&#39;</span>      <span class="o">{</span> <span class="nc">SUBOP</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;,&#39;</span>      <span class="o">{</span> <span class="nc">COMMA</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;;&#39;</span>      <span class="o">{</span> <span class="nc">SEMICOLON</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;(&#39;</span>      <span class="o">{</span> <span class="nc">LEFTPAREN</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;)&#39;</span>      <span class="o">{</span> <span class="nc">RIGHTPAREN</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">digits</span> <span class="k">as</span> <span class="n">d</span> <span class="o">{</span>
</span><span class='line'>        <span class="c">(* parse literal *)</span>
</span><span class='line'>        <span class="nc">LITERAL</span> <span class="o">(</span><span class="n">int_of_string</span> <span class="n">d</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s add the line counting and syntax error reporting to our <em>lexer.mll</em> header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* current token line number *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">line_num</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">exception</span> <span class="nc">Syntax_error</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">syntax_error</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">raise</span> <span class="o">(</span><span class="nc">Syntax_error</span> <span class="o">(</span><span class="n">msg</span> <span class="o">^</span> <span class="s2">&quot; on line &quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="o">!</span><span class="n">line_num</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we&rsquo;ll add the rule for counting new lines and reporting syntax errors if lexer encounters unknown token. Also we need to generate <em>EOF</em> token when lexer will encounter the end of file. To skip blank characters, as those aren&rsquo;t need in our micro compiler, we&rsquo;ll just recursively call lexer&rsquo;s micro rule providing it with <em>lexbuf</em> which is described in manual.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">rule</span> <span class="n">micro</span> <span class="o">=</span> <span class="n">parse</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>    <span class="o">|</span> <span class="sc">&#39;\n&#39;</span>     <span class="o">{</span> <span class="n">incr</span> <span class="n">line_num</span><span class="o">;</span> <span class="n">micro</span> <span class="n">lexbuf</span> <span class="o">}</span> <span class="c">(* counting new line characters *)</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">blank</span>    <span class="o">{</span> <span class="n">micro</span> <span class="n">lexbuf</span> <span class="o">}</span> <span class="c">(* skipping blank characters *)</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span>        <span class="o">{</span> <span class="n">syntax_error</span> <span class="s2">&quot;couldn&#39;t identify the token&quot;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">eof</span>      <span class="o">{</span> <span class="nc">EOF</span> <span class="o">}</span> <span class="c">(* no more tokens *)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Woah woaw wow, much forget, wait!!! Aren&rsquo;t we missing something?! Ah yes, identifiers, indeed! First of all let&rsquo;s define a table of known keywords in the header as we need to handle them differently.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* keyword -&gt; token translation table *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;begin&quot;</span><span class="o">,</span> <span class="nc">BEGIN</span><span class="o">;</span> <span class="s2">&quot;end&quot;</span><span class="o">,</span> <span class="nc">END</span><span class="o">;</span> <span class="s2">&quot;read&quot;</span><span class="o">,</span> <span class="nc">READ</span><span class="o">;</span> <span class="s2">&quot;write&quot;</span><span class="o">,</span> <span class="nc">WRITE</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now let&rsquo;s handle the actual identifier tokens.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">rule</span> <span class="n">micro</span> <span class="o">=</span> <span class="n">parse</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">iden</span> <span class="k">as</span> <span class="n">i</span> <span class="o">{</span>
</span><span class='line'>        <span class="c">(* try keywords if not found then it&#39;s identifier *)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">lowercase</span> <span class="n">i</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">try</span> <span class="nn">List</span><span class="p">.</span><span class="n">assoc</span> <span class="n">l</span> <span class="n">keywords</span>
</span><span class='line'>        <span class="k">with</span> <span class="nc">Not_found</span> <span class="o">-&gt;</span> <span class="nc">IDENTIFIER</span> <span class="n">i</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Congratulations we have a lexer ready, now it&rsquo;s a parsing time! Let&rsquo;s define a parser for our micro code. Parser definition syntax is pretty straightforward and reminds kinds of <a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">BNF</a> definition.
If you don&rsquo;t understand it just by looking at it or don&rsquo;t know what <em>BNF</em> is I suggest you take a look into description of definition syntax by consulting ocamlyacc manual.
As you can see our parser starts with a program definition which starts with <em>begin statement</em> followed by <em>statements</em> and followed by <em>end statement</em> definitions and ends with <em>EOF</em> token.
The part between <em>{</em> and <em>}</em> is <em>OCaml</em> source code that is executed after the parsing of the definition is done. When parser does it&rsquo;s job it raises <em>End_of_file</em> exception which we&rsquo;ll
be handling as end of parsing. So basically when parser sees <em>BEGIN</em> token it just executes <em>generate_begin</em> function which we&rsquo;ll define shortly. Same with <em>END</em> token only now we are executing
<em>generate_end</em> function instead. Statements definition is recursive and just references a <em>statement</em> followed by <em>semicolon</em> followed by more <em>statements</em> or none.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">%</span><span class="n">start</span> <span class="n">program</span>
</span><span class='line'><span class="o">%</span><span class="k">type</span> <span class="o">&lt;</span><span class="kt">unit</span><span class="o">&gt;</span> <span class="n">program</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span>
</span><span class='line'>
</span><span class='line'><span class="n">program</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span>   <span class="n">begin_stmt</span> <span class="n">statements</span> <span class="n">end_stmt</span> <span class="nc">EOF</span> <span class="o">{</span> <span class="k">raise</span> <span class="nc">End_of_file</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">begin_stmt</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span>   <span class="nc">BEGIN</span> <span class="o">{</span> <span class="n">generate_begin</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">end_stmt</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span>   <span class="nc">END</span> <span class="o">{</span> <span class="n">generate_end</span> <span class="bp">()</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">statements</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">statement</span> <span class="nc">SEMICOLON</span> <span class="n">statements</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s write some code to generate the assembly for the <em>begin</em> and <em>end</em> statements. We&rsquo;ll put all our code generation functions into a separate module called <em>codegen</em> so let&rsquo;s create
a new file called <em>codegen.ml</em> and add some code generation methods into it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* code generation *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">chan</span> <span class="o">=</span> <span class="n">ref</span> <span class="n">stdout</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">set_chan</span> <span class="n">new_chan</span> <span class="o">=</span> <span class="n">chan</span> <span class="o">:=</span> <span class="n">new_chan</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">gen</span> <span class="n">v</span> <span class="o">=</span> <span class="n">output_string</span> <span class="o">!</span><span class="n">chan</span> <span class="n">v</span><span class="o">;</span> <span class="n">output_string</span> <span class="o">!</span><span class="n">chan</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_begin</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">gen</span>
</span><span class='line'><span class="s2">&quot;extern printf</span>
</span><span class='line'><span class="s2">extern scanf</span>
</span><span class='line'>
</span><span class='line'><span class="s2">section .data</span>
</span><span class='line'><span class="s2">    inf: db &#39;%d&#39;, 0</span>
</span><span class='line'><span class="s2">    ouf: db &#39;%d&#39;, 10, 0</span>
</span><span class='line'>
</span><span class='line'><span class="s2">section .text</span>
</span><span class='line'><span class="s2">    global main</span>
</span><span class='line'>
</span><span class='line'><span class="s2">main:</span>
</span><span class='line'><span class="s2">    sub   esp, 4096&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_end</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">gen</span>
</span><span class='line'><span class="s2">&quot;    add   esp, 4096</span>
</span><span class='line'><span class="s2">exit:</span>
</span><span class='line'><span class="s2">    mov  eax, 1 ; sys_exit</span>
</span><span class='line'><span class="s2">    mov  ebx, 0</span>
</span><span class='line'><span class="s2">    int  80h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for parsing expression we need some way to count the depth of the expression for temporary variables so we&rsquo;ll be just incrementing it as we go deeper and then reset it to 0 after
the statement is over. This approach is not optimized one as it would mean some extra stack usage for same depth AST nodes however for sake of simplicity we&rsquo;ll leave it as it is.
So now our <em>parser.mly</em> header should look like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">%{</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">Codegen</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">depth</span> <span class="o">=</span> <span class="n">ref</span> <span class="mi">0</span>
</span><span class='line'><span class="k">let</span> <span class="n">depth_incr</span> <span class="n">f</span> <span class="o">=</span> <span class="n">incr</span> <span class="n">depth</span><span class="o">;</span> <span class="n">f</span> <span class="o">!</span><span class="n">depth</span>
</span><span class='line'><span class="k">let</span> <span class="n">depth_reset</span> <span class="o">=</span> <span class="n">depth</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="o">%}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s define description of <em>statement</em> in parser</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">statement</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="nc">IDENTIFIER</span> <span class="nc">ASSIGN</span> <span class="n">expression</span> <span class="o">{</span> <span class="n">generate_assign</span> <span class="o">$</span><span class="mi">1</span> <span class="o">$</span><span class="mi">3</span><span class="o">;</span> <span class="n">depth_reset</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="nc">READ</span> <span class="nc">LEFTPAREN</span> <span class="n">identifier_list</span> <span class="nc">RIGHTPAREN</span> <span class="o">{</span> <span class="n">generate_reads</span> <span class="o">$</span><span class="mi">3</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="nc">WRITE</span> <span class="nc">LEFTPAREN</span> <span class="n">expression_list</span> <span class="nc">RIGHTPAREN</span> <span class="o">{</span> <span class="n">generate_writes</span> <span class="o">$</span><span class="mi">3</span><span class="o">;</span> <span class="n">depth_reset</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s start with simpler <em>read statement</em>. Now as you can see for <em>read statement</em> we are using identifiers only so we don&rsquo;t need to do anything with depth of expression so we aren&rsquo;t
calling depth_reset function. Now in order to get identifier list we&rsquo;ll be just parsing identifiers and collecting them into the list.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">identifier_list</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="nc">IDENTIFIER</span> <span class="o">{</span> <span class="o">[$</span><span class="mi">1</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="nc">IDENTIFIER</span> <span class="nc">COMMA</span> <span class="n">identifier_list</span> <span class="o">{</span> <span class="o">$</span><span class="mi">1</span> <span class="o">::</span> <span class="o">$</span><span class="mi">3</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s generate some assembly for reading data into identifiers. First let&rsquo;s start with some operation helper functions. The read statement is just pretty straightforward and
just generates a scanf function call for every identifier.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">op</span> <span class="n">opcode</span> <span class="n">a</span> <span class="o">=</span> <span class="n">gen</span> <span class="o">(</span><span class="s2">&quot;    &quot;</span> <span class="o">^</span> <span class="n">opcode</span> <span class="o">^</span> <span class="s2">&quot;  &quot;</span> <span class="o">^</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">op2</span> <span class="n">opcode</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">gen</span> <span class="o">(</span><span class="s2">&quot;    &quot;</span> <span class="o">^</span> <span class="n">opcode</span> <span class="o">^</span> <span class="s2">&quot;  &quot;</span> <span class="o">^</span> <span class="n">a</span> <span class="o">^</span> <span class="s2">&quot;, &quot;</span> <span class="o">^</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">push</span> <span class="n">a</span> <span class="o">=</span> <span class="n">op</span> <span class="s2">&quot;push&quot;</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_read</span> <span class="n">i</span> <span class="o">=</span> <span class="n">op2</span> <span class="s2">&quot;lea&quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="o">(</span><span class="n">var_addr</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">push</span> <span class="s2">&quot;eax&quot;</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">push</span> <span class="s2">&quot;inf&quot;</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">op</span> <span class="s2">&quot;call&quot;</span> <span class="s2">&quot;scanf&quot;</span><span class="o">;</span>
</span><span class='line'>                      <span class="n">op2</span> <span class="s2">&quot;add &quot;</span> <span class="s2">&quot;esp&quot;</span> <span class="s2">&quot;8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_reads</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">generate_read</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we are using <em>var_addr</em> function which we didn&rsquo;t defined yet, this function will give us the actual offset address on the stack based on the name of identifier.
We also handle <strong>__temp</strong> identifiers separately as those are just temporary variables which are discarded every time the statement is over, their offset is specified in their name after
the <strong>__temp</strong> part, so for example <strong>__temp1</strong> is an temporary variable with offset 1. Let&rsquo;s write some code that handles all of this.  All the named variables that are defined are saved into
<em>vars</em> <em>Hashtbl</em> that contains <em>variable name &ndash;> stack offset</em> information.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">exception</span> <span class="nc">Codegen_error</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">codegen_error</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">raise</span> <span class="o">(</span><span class="nc">Codegen_error</span> <span class="n">msg</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">vars</span> <span class="o">=</span> <span class="n">ref</span> <span class="o">(</span><span class="nn">Hashtbl</span><span class="p">.</span><span class="n">create</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">var_addr</span> <span class="n">v</span> <span class="o">=</span> <span class="k">if</span> <span class="nn">String</span><span class="p">.</span><span class="n">length</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="nn">String</span><span class="p">.</span><span class="n">sub</span> <span class="n">v</span> <span class="mi">0</span> <span class="mi">6</span> <span class="o">=</span> <span class="s2">&quot;__temp&quot;</span>
</span><span class='line'>                 <span class="k">then</span> <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">sub</span> <span class="n">v</span> <span class="mi">6</span> <span class="o">((</span><span class="nn">String</span><span class="p">.</span><span class="n">length</span> <span class="n">v</span><span class="o">)</span> <span class="o">-</span> <span class="mi">6</span><span class="o">)</span> <span class="k">in</span> <span class="s2">&quot;[esp+&quot;</span> <span class="o">^</span> <span class="n">i</span> <span class="o">^</span> <span class="s2">&quot;]&quot;</span>
</span><span class='line'>                 <span class="k">else</span>
</span><span class='line'>                 <span class="k">try</span> <span class="s2">&quot;[esp+&quot;</span> <span class="o">^</span> <span class="n">string_of_int</span> <span class="o">(</span><span class="nn">Hashtbl</span><span class="p">.</span><span class="n">find</span> <span class="o">!</span><span class="n">vars</span> <span class="n">v</span><span class="o">)</span> <span class="o">^</span> <span class="s2">&quot;]&quot;</span>
</span><span class='line'>                 <span class="k">with</span> <span class="nc">Not_found</span> <span class="o">-&gt;</span> <span class="n">codegen_error</span> <span class="o">(</span><span class="s2">&quot;identifier &quot;</span> <span class="o">^</span> <span class="n">v</span> <span class="o">^</span> <span class="s2">&quot; not defined&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the write statement instead of identifiers we could have expressions, so let&rsquo;s define those.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">expression_list</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="n">expression</span> <span class="o">{</span> <span class="o">[$</span><span class="mi">1</span><span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">expression</span> <span class="nc">COMMA</span> <span class="n">expression_list</span> <span class="o">{</span> <span class="o">$</span><span class="mi">1</span> <span class="o">::</span> <span class="o">$</span><span class="mi">3</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the code that generates write statements is almost the same as read but instead of calling scanf we&rsquo;ll be calling printf function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">generate_write</span> <span class="n">i</span> <span class="o">=</span> <span class="n">push</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                       <span class="n">push</span> <span class="s2">&quot;ouf&quot;</span><span class="o">;</span>
</span><span class='line'>                       <span class="n">op</span> <span class="s2">&quot;call&quot;</span> <span class="s2">&quot;printf&quot;</span><span class="o">;</span>
</span><span class='line'>                       <span class="n">op2</span> <span class="s2">&quot;add &quot;</span> <span class="s2">&quot;esp&quot;</span> <span class="s2">&quot;8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_writes</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">generate_write</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now declare an expression</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">expression</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="nc">IDENTIFIER</span> <span class="o">{</span> <span class="n">var</span> <span class="o">$</span><span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="nc">LITERAL</span> <span class="o">{</span> <span class="n">generate_literal</span> <span class="o">$</span><span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">addop</span> <span class="o">{</span> <span class="o">$</span><span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">subop</span> <span class="o">{</span> <span class="o">$</span><span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For simple cases expression can be just a <em>variable</em> or a <em>literal</em> so let&rsquo;s write some code that generates assembly for those.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">var</span> <span class="n">v</span> <span class="o">=</span> <span class="s2">&quot;dword &quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">var_addr</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_literal</span> <span class="o">=</span> <span class="n">string_of_int</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now handle <em>addition</em> and <em>substraction</em> expressions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">addop</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="nc">LITERAL</span> <span class="nc">ADDOP</span> <span class="nc">LITERAL</span> <span class="o">{</span> <span class="n">generate_literal</span> <span class="o">($</span><span class="mi">1</span> <span class="o">+</span> <span class="o">$</span><span class="mi">3</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">expression</span> <span class="nc">ADDOP</span> <span class="n">expression</span> <span class="o">{</span> <span class="o">(</span><span class="n">depth_incr</span> <span class="n">generate_add</span><span class="o">)</span> <span class="o">$</span><span class="mi">1</span> <span class="o">$</span><span class="mi">3</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">subop</span><span class="o">:</span>
</span><span class='line'><span class="o">|</span> <span class="nc">LITERAL</span> <span class="nc">SUBOP</span> <span class="nc">LITERAL</span> <span class="o">{</span> <span class="n">generate_literal</span> <span class="o">($</span><span class="mi">1</span> <span class="o">-</span> <span class="o">$</span><span class="mi">3</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">|</span> <span class="n">expression</span> <span class="nc">SUBOP</span> <span class="n">expression</span> <span class="o">{</span> <span class="o">(</span><span class="n">depth_incr</span> <span class="n">generate_sub</span><span class="o">)</span> <span class="o">$</span><span class="mi">1</span> <span class="o">$</span><span class="mi">3</span> <span class="o">}</span>
</span><span class='line'><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see simple cases such as when we have literal from both sides are handled by our parser itself.
Now let&rsquo;s write some more code generation functions for expressions. We&rsquo;ll be using temporary variables so
we need to identify a bottom variable at the stack that will be on the top offset. And from there we&rsquo;ll use depth
of current expression in order to have a unique position for the temporary variable. This part can be written
slightly in a different way for example instead of counting depth we&rsquo;ll be counting the temporary variables and resetting them
each time a statement is over. Both approaches are almost the same so we&rsquo;ll just leave it like that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">bottom_var</span> <span class="bp">()</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="n">v</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;=</span> <span class="n">c</span> <span class="k">then</span> <span class="o">(</span><span class="n">v</span><span class="o">+</span><span class="mi">4</span><span class="o">)</span> <span class="k">else</span> <span class="n">c</span><span class="o">)</span> <span class="o">!</span><span class="n">vars</span> <span class="mi">0</span>
</span><span class='line'><span class="k">let</span> <span class="n">empty_var</span> <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="n">bottom_var</span> <span class="bp">()</span><span class="o">)+(</span><span class="mi">4</span><span class="o">*(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'><span class="k">let</span> <span class="n">temp_var</span> <span class="n">i</span> <span class="o">=</span> <span class="s2">&quot;__temp&quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="o">(</span><span class="n">empty_var</span> <span class="n">i</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">is_var</span> <span class="n">v</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">re</span> <span class="o">=</span> <span class="nn">Str</span><span class="p">.</span><span class="n">regexp_string</span> <span class="s2">&quot;[esp+&quot;</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">try</span> <span class="n">ignore</span> <span class="o">(</span><span class="nn">Str</span><span class="p">.</span><span class="n">search_forward</span> <span class="n">re</span> <span class="n">v</span> <span class="mi">0</span><span class="o">);</span> <span class="bp">true</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">Not_found</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_copy</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="k">if</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="k">then</span> <span class="bp">()</span> <span class="k">else</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">is_var</span> <span class="n">b</span> <span class="k">then</span> <span class="k">begin</span> <span class="n">op2</span> <span class="s2">&quot;mov &quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="n">b</span><span class="o">;</span> <span class="n">op2</span> <span class="s2">&quot;mov &quot;</span> <span class="n">a</span> <span class="s2">&quot;eax&quot;</span> <span class="k">end</span>
</span><span class='line'>                        <span class="k">else</span> <span class="n">op2</span> <span class="s2">&quot;mov &quot;</span> <span class="n">a</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_add</span> <span class="n">d</span> <span class="n">id1</span> <span class="n">id2</span> <span class="o">=</span> <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">var</span> <span class="o">(</span><span class="n">temp_var</span> <span class="n">d</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>                             <span class="n">generate_copy</span> <span class="n">v</span> <span class="n">id1</span><span class="o">;</span>
</span><span class='line'>                             <span class="k">if</span> <span class="n">is_var</span> <span class="n">id2</span> <span class="k">then</span> <span class="k">begin</span> <span class="n">op2</span> <span class="s2">&quot;mov &quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="n">id2</span><span class="o">;</span> <span class="n">op2</span> <span class="s2">&quot;add &quot;</span> <span class="n">v</span> <span class="s2">&quot;eax&quot;</span> <span class="k">end</span>
</span><span class='line'>                             <span class="k">else</span> <span class="n">op2</span> <span class="s2">&quot;add &quot;</span> <span class="n">v</span> <span class="n">id2</span><span class="o">;</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_sub</span> <span class="n">d</span> <span class="n">id1</span> <span class="n">id2</span> <span class="o">=</span> <span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">var</span> <span class="o">(</span><span class="n">temp_var</span> <span class="n">d</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>                             <span class="n">generate_copy</span> <span class="n">v</span> <span class="n">id1</span><span class="o">;</span>
</span><span class='line'>                             <span class="k">if</span> <span class="n">is_var</span> <span class="n">id2</span> <span class="k">then</span> <span class="k">begin</span> <span class="n">op2</span> <span class="s2">&quot;mov &quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="n">id2</span><span class="o">;</span> <span class="n">op2</span> <span class="s2">&quot;sub &quot;</span> <span class="n">v</span> <span class="s2">&quot;eax&quot;</span> <span class="k">end</span>
</span><span class='line'>                             <span class="k">else</span> <span class="n">op2</span> <span class="s2">&quot;sub &quot;</span> <span class="n">v</span> <span class="n">id2</span><span class="o">;</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only thing left to do is generate some code for <em>assignment</em> expression and our parser is done.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">is_alloc_var</span> <span class="n">v</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">mem</span> <span class="o">!</span><span class="n">vars</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">alloc_var</span> <span class="n">v</span> <span class="o">=</span> <span class="k">if</span> <span class="n">is_alloc_var</span> <span class="n">v</span> <span class="k">then</span> <span class="n">var</span> <span class="n">v</span>
</span><span class='line'>                  <span class="k">else</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">replace</span> <span class="o">!</span><span class="n">vars</span> <span class="n">v</span> <span class="o">(</span><span class="n">empty_var</span> <span class="mi">1</span><span class="o">)</span> <span class="k">in</span> <span class="n">var</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_assign</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="o">(</span><span class="n">alloc_var</span> <span class="n">a</span><span class="o">)</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now for the final part we need to write the actual compiling function. It will parse the micro source file specified as an argument and
will compile it using <em>nasm</em> and <em>gcc</em>. Let&rsquo;s create <em>micro.ml</em> file and write some final code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* compiling *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compile</span> <span class="n">f</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">out</span> <span class="o">=</span> <span class="o">(</span><span class="nn">Filename</span><span class="p">.</span><span class="n">chop_extension</span> <span class="n">f</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">out_chan</span> <span class="o">=</span> <span class="n">open_out</span> <span class="o">(</span><span class="n">out</span> <span class="o">^</span> <span class="s2">&quot;.s&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="ow">and</span> <span class="n">lexbuf</span> <span class="o">=</span> <span class="nn">Lexing</span><span class="p">.</span><span class="n">from_channel</span> <span class="o">(</span><span class="n">open_in</span> <span class="n">f</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>            <span class="k">let</span> <span class="k">rec</span> <span class="n">parse</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>                <span class="nn">Parser</span><span class="p">.</span><span class="n">program</span> <span class="nn">Lexer</span><span class="p">.</span><span class="n">micro</span> <span class="n">lexbuf</span><span class="o">;</span> <span class="n">parse</span> <span class="bp">()</span> <span class="k">in</span>
</span><span class='line'>            <span class="nn">Codegen</span><span class="p">.</span><span class="n">set_chan</span> <span class="n">out_chan</span><span class="o">;</span>
</span><span class='line'>            <span class="n">ignore</span><span class="o">(</span><span class="n">parse</span> <span class="bp">()</span><span class="o">);</span>
</span><span class='line'>        <span class="k">with</span>
</span><span class='line'>          <span class="nc">End_of_file</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">begin</span>
</span><span class='line'>                <span class="n">close_out</span> <span class="n">out_chan</span><span class="o">;</span>
</span><span class='line'>                <span class="n">ignore</span><span class="o">(</span><span class="nn">Sys</span><span class="p">.</span><span class="n">command</span> <span class="o">(</span><span class="s2">&quot;nasm -f elf32 &quot;</span> <span class="o">^</span> <span class="n">out</span> <span class="o">^</span> <span class="s2">&quot;.s&quot;</span><span class="o">));</span>
</span><span class='line'>                <span class="n">ignore</span><span class="o">(</span><span class="nn">Sys</span><span class="p">.</span><span class="n">command</span> <span class="o">(</span><span class="s2">&quot;gcc -m32 -o &quot;</span> <span class="o">^</span> <span class="n">out</span> <span class="o">^</span> <span class="s2">&quot; &quot;</span> <span class="o">^</span> <span class="n">out</span> <span class="o">^</span> <span class="s2">&quot;.o&quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">Lexer</span><span class="p">.</span><span class="nc">Syntax_error</span> <span class="n">s</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">print_string</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>            <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">help</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">print_string</span> <span class="s2">&quot;micro &lt;file&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="bp">()</span> <span class="o">=</span> <span class="k">if</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">argv</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">then</span> <span class="n">help</span> <span class="bp">()</span>
</span><span class='line'>         <span class="k">else</span>
</span><span class='line'>             <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">get</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">argv</span> <span class="mi">1</span> <span class="k">in</span>
</span><span class='line'>             <span class="nn">Format</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;compiling %s</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">file</span><span class="o">;</span>
</span><span class='line'>             <span class="nn">Format</span><span class="p">.</span><span class="n">print_flush</span> <span class="bp">()</span><span class="o">;</span>
</span><span class='line'>             <span class="n">compile</span> <span class="n">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phew, writing posts is exhausting but finally our micro compiler is ready! Let&rsquo;s test it. You need to have <em>nasm</em> and <em>gcc</em> installed on your <em>Linux</em> system in order to run it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./micro ./examples/hello.mc
</span><span class='line'>./examples/hello
</span></code></pre></td></tr></table></div></figure>


<p>And it works! Congratulations! We are done! So what we learned today? Building compiler is actually easier than it seems! Happy compiling everyone!</p>

<p><img src="http://i.imgur.com/cmm6AWx.jpg" alt="Sad Loli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Micro Compiler in OCaml]]></title>
    <link href="http://troydm.github.io/blog/2014/03/29/writing-micro-compiler-in-ocaml/"/>
    <updated>2014-03-29T19:12:25+04:00</updated>
    <id>http://troydm.github.io/blog/2014/03/29/writing-micro-compiler-in-ocaml</id>
    <content type="html"><![CDATA[<p>At one point or another every single software developer in the world comes to a realization in his career when the time is ripe and it&rsquo;s time
to write your own super cool programming language.</p>

<p><img src="http://i.imgur.com/KSiXBCN.png" alt="Lemon Loli" /></p>

<p>However the subject of creating your own programming language with an compiler is quite a complex one and can&rsquo;t be tackled without some pre-research.
That&rsquo;s how I&rsquo;ve started reading <a href="http://www.amazon.com/Crafting-Compiler-Charles-N-Fischer/dp/0805321667/">Crafting Compiler in C</a>, an aged but
really comprehensive book about developing your own compiler for an <a href="http://en.wikipedia.org/wiki/Ada_%28programming_language%29">Ada</a>-like programming language.
Second chapter describes writing a really simple micro language targeting pseudo assembly-like output in order to explain the core concepts of developing your
own compiler and writing an <a href="https://en.wikipedia.org/wiki/LL_parser">LL(1)</a> parser.</p>

<p>Let&rsquo;s try rewriting this micro compiler in <a href="http://ocaml.org/">OCaml</a>, a language better suited for writing compilers that is becoming quite popular due to it&rsquo;s clean syntax and strict evaluation semantics combined
with functional and object-oriented programming styles. If you are not familiar with OCaml try reading <a href="https://realworldocaml.org/">Real World OCaml</a> first.
Instead of outputting pseudo assembly our micro compiler will output a real <a href="http://www.nasm.us/">nasm</a> source code which will be automatically compiled into a binary executable file.</p>

<!--more-->


<p>So let&rsquo;s start by describing simple micro language with an example source code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>begin
</span><span class='line'>    a := 1;
</span><span class='line'>    b := a + 1;
</span><span class='line'>    b := b + 1;
</span><span class='line'>    write (a,b);
</span><span class='line'>    read(a,b);
</span><span class='line'>    write (a+10, b+10);
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>As you can see from example source code the program starts with <strong>begin</strong> keyword and ends with an <strong>end</strong> keyword. It has only integer variables which must be predefined by assignment operation before using in expressions, and it also has two simple functions <strong>read</strong> and <strong>write</strong>.</p>

<p><strong>read</strong> takes a list of variable names separated by comma and reads user input from <em>stdin</em> into those variables</p>

<p><strong>write</strong> takes a list of expressions and outputs them into <em>stdout</em></p>

<p>Now in order to create an executable from this source code first we need to parse it. Since LL(1) type parser is enough to parse this kind of language, we&rsquo;ll need only one character lookahead.
 Unfortunately OCaml doesn&rsquo;t have an unread operation like libc&rsquo;s <strong>ungetc</strong> so we&rsquo;ll need to define a simple stream reader which will have a <em>mutable char</em> and we will also count lines of source code read.
We&rsquo;ll also define two utility functions which we will use later which will check if a character is alphanumeric and if it&rsquo;s a digit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* stream *)</span>
</span><span class='line'><span class="k">type</span> <span class="n">stream</span> <span class="o">=</span> <span class="o">{</span> <span class="k">mutable</span> <span class="n">chr</span><span class="o">:</span> <span class="kt">char</span> <span class="n">option</span><span class="o">;</span> <span class="k">mutable</span> <span class="n">line_num</span><span class="o">:</span> <span class="kt">int</span><span class="o">;</span> <span class="n">chan</span><span class="o">:</span> <span class="n">in_channel</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">open_stream</span> <span class="n">file</span> <span class="o">=</span> <span class="o">{</span> <span class="n">chr</span><span class="o">=</span><span class="nc">None</span><span class="o">;</span> <span class="n">line_num</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">chan</span><span class="o">=</span><span class="n">open_in</span> <span class="n">file</span> <span class="o">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">close_stream</span> <span class="n">stm</span> <span class="o">=</span> <span class="n">close_in</span> <span class="n">stm</span><span class="o">.</span><span class="n">chan</span>
</span><span class='line'><span class="k">let</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="o">=</span> <span class="k">match</span> <span class="n">stm</span><span class="o">.</span><span class="n">chr</span> <span class="k">with</span>
</span><span class='line'>                        <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">input_char</span> <span class="n">stm</span><span class="o">.</span><span class="n">chan</span> <span class="k">in</span>
</span><span class='line'>                                <span class="k">if</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span> <span class="k">then</span>
</span><span class='line'>                                    <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">stm</span><span class="o">.</span><span class="n">line_num</span> <span class="o">&lt;-</span> <span class="n">stm</span><span class="o">.</span><span class="n">line_num</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">in</span> <span class="n">c</span>
</span><span class='line'>                                <span class="k">else</span> <span class="n">c</span>
</span><span class='line'>                      <span class="o">|</span> <span class="nc">Some</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">stm</span><span class="o">.</span><span class="n">chr</span> <span class="o">&lt;-</span> <span class="nc">None</span><span class="o">;</span> <span class="n">c</span>
</span><span class='line'><span class="k">let</span> <span class="n">unread_char</span> <span class="n">stm</span> <span class="n">c</span> <span class="o">=</span> <span class="n">stm</span><span class="o">.</span><span class="n">chr</span> <span class="o">&lt;-</span> <span class="nc">Some</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* character *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">is_digit</span> <span class="n">c</span> <span class="o">=</span> <span class="k">let</span> <span class="n">code</span> <span class="o">=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span> <span class="n">c</span> <span class="k">in</span>
</span><span class='line'>                 <span class="n">code</span> <span class="o">&gt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;0&#39;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">code</span> <span class="o">&lt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;9&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">is_alpha</span> <span class="n">c</span> <span class="o">=</span> <span class="k">let</span> <span class="n">code</span> <span class="o">=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span> <span class="n">c</span> <span class="k">in</span>
</span><span class='line'>                 <span class="o">(</span><span class="n">code</span> <span class="o">&gt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;A&#39;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">code</span> <span class="o">&lt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;Z&#39;</span><span class="o">))</span> <span class="o">||</span>
</span><span class='line'>                 <span class="o">(</span><span class="n">code</span> <span class="o">&gt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;a&#39;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">code</span> <span class="o">&lt;=</span> <span class="nn">Char</span><span class="p">.</span><span class="n">code</span><span class="o">(</span><span class="sc">&#39;z&#39;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for our parser we will be parsing source code one token at a time and we&rsquo;ll be recursively calling parsing methods and matching tokens as we go.
We&rsquo;ll define some additional utility functions which will be used during parsing including an <em>Syntax_error</em> exception which will be thrown if invalid
token is scanned.</p>

<p><strong>scan</strong> will scan the stream for next token, that&rsquo;s where our token recognition logic is in.</p>

<p><strong>skip_blank_chars</strong> function will skip any number of blank characters including new line characters</p>

<p><strong>next_token</strong> will return last scanned token or will scan stream for next token</p>

<p><strong>match_next</strong> will match last scanned token or will scan stream for next token, match it and return it</p>

<p><strong>match_token</strong> will match the last scanned token against the specified token in parameter or will scan stream for next token and match against it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* token *)</span>
</span><span class='line'><span class="k">type</span> <span class="n">token</span> <span class="o">=</span> <span class="nc">Begin</span> <span class="o">|</span> <span class="nc">End</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">Identifier</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">Read</span> <span class="o">|</span> <span class="nc">Write</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">Literal</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">Assign</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">LeftParen</span> <span class="o">|</span> <span class="nc">RightParen</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">AddOp</span> <span class="o">|</span> <span class="nc">SubOp</span>
</span><span class='line'>           <span class="o">|</span> <span class="nc">Comma</span> <span class="o">|</span> <span class="nc">Semicolon</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">scanner</span> <span class="o">=</span> <span class="o">{</span> <span class="k">mutable</span> <span class="n">last_token</span><span class="o">:</span> <span class="n">token</span> <span class="n">option</span><span class="o">;</span> <span class="n">stm</span><span class="o">:</span> <span class="n">stream</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">exception</span> <span class="nc">Syntax_error</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">raise</span> <span class="o">(</span><span class="nc">Syntax_error</span> <span class="o">(</span><span class="n">msg</span> <span class="o">^</span> <span class="s2">&quot; on line &quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="n">s</span><span class="o">.</span><span class="n">stm</span><span class="o">.</span><span class="n">line_num</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">(* skip all blank and new line characters *)</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">skip_blank_chars</span> <span class="n">stm</span> <span class="o">=</span> <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="k">in</span>
</span><span class='line'>                               <span class="k">if</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\t&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\r&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span>
</span><span class='line'>                               <span class="k">then</span> <span class="n">skip_blank_chars</span> <span class="n">stm</span>
</span><span class='line'>                               <span class="k">else</span> <span class="n">unread_char</span> <span class="n">stm</span> <span class="n">c</span><span class="o">;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* scan a stream and return next token *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">scan</span> <span class="n">s</span> <span class="o">=</span>   <span class="k">let</span> <span class="n">stm</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">stm</span> <span class="k">in</span> <span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="k">in</span>
</span><span class='line'>               <span class="k">let</span> <span class="k">rec</span> <span class="n">scan_iden</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">let</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="k">in</span>
</span><span class='line'>                                       <span class="k">if</span> <span class="n">is_alpha</span> <span class="n">nc</span> <span class="o">||</span> <span class="n">is_digit</span> <span class="n">nc</span> <span class="o">||</span> <span class="n">nc</span><span class="o">=</span><span class="sc">&#39;_&#39;</span>
</span><span class='line'>                                       <span class="k">then</span> <span class="n">scan_iden</span> <span class="o">(</span><span class="n">acc</span> <span class="o">^</span> <span class="o">(</span><span class="nn">Char</span><span class="p">.</span><span class="n">escaped</span> <span class="n">nc</span><span class="o">))</span>
</span><span class='line'>                                       <span class="k">else</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">unread_char</span> <span class="n">stm</span> <span class="n">nc</span> <span class="k">in</span>
</span><span class='line'>                                            <span class="k">let</span> <span class="n">lc</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">lowercase</span> <span class="n">acc</span> <span class="k">in</span>
</span><span class='line'>                                            <span class="k">if</span> <span class="n">lc</span> <span class="o">=</span> <span class="s2">&quot;begin&quot;</span> <span class="k">then</span> <span class="nc">Begin</span>
</span><span class='line'>                                            <span class="k">else</span> <span class="k">if</span> <span class="n">lc</span> <span class="o">=</span> <span class="s2">&quot;end&quot;</span> <span class="k">then</span> <span class="nc">End</span>
</span><span class='line'>                                            <span class="k">else</span> <span class="k">if</span> <span class="n">lc</span> <span class="o">=</span> <span class="s2">&quot;read&quot;</span> <span class="k">then</span> <span class="nc">Read</span>
</span><span class='line'>                                            <span class="k">else</span> <span class="k">if</span> <span class="n">lc</span> <span class="o">=</span> <span class="s2">&quot;write&quot;</span> <span class="k">then</span> <span class="nc">Write</span>
</span><span class='line'>                                            <span class="k">else</span> <span class="nc">Identifier</span> <span class="n">acc</span>
</span><span class='line'>               <span class="k">in</span>
</span><span class='line'>               <span class="k">let</span> <span class="k">rec</span> <span class="n">scan_lit</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">let</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="k">in</span>
</span><span class='line'>                                      <span class="k">if</span> <span class="n">is_digit</span> <span class="n">nc</span>
</span><span class='line'>                                      <span class="k">then</span> <span class="n">scan_lit</span> <span class="o">(</span><span class="n">acc</span> <span class="o">^</span> <span class="o">(</span><span class="nn">Char</span><span class="p">.</span><span class="n">escaped</span> <span class="n">nc</span><span class="o">))</span>
</span><span class='line'>                                      <span class="k">else</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">unread_char</span> <span class="n">stm</span> <span class="n">nc</span> <span class="k">in</span>
</span><span class='line'>                                           <span class="nc">Literal</span> <span class="o">(</span><span class="n">int_of_string</span> <span class="n">acc</span><span class="o">)</span>
</span><span class='line'>               <span class="k">in</span>
</span><span class='line'>               <span class="k">if</span> <span class="n">is_alpha</span> <span class="n">c</span> <span class="k">then</span> <span class="n">scan_iden</span> <span class="o">(</span><span class="nn">Char</span><span class="p">.</span><span class="n">escaped</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">is_digit</span> <span class="n">c</span> <span class="k">then</span> <span class="n">scan_lit</span> <span class="o">(</span><span class="nn">Char</span><span class="p">.</span><span class="n">escaped</span> <span class="n">c</span><span class="o">)</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;+&#39;</span> <span class="k">then</span> <span class="nc">AddOp</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;-&#39;</span> <span class="k">then</span> <span class="nc">SubOp</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;,&#39;</span> <span class="k">then</span> <span class="nc">Comma</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;;&#39;</span> <span class="k">then</span> <span class="nc">Semicolon</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;(&#39;</span> <span class="k">then</span> <span class="nc">LeftParen</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;)&#39;</span> <span class="k">then</span> <span class="nc">RightParen</span>
</span><span class='line'>               <span class="k">else</span> <span class="k">if</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39;:&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">read_char</span> <span class="n">stm</span> <span class="o">=</span> <span class="sc">&#39;=&#39;</span> <span class="k">then</span> <span class="nc">Assign</span>
</span><span class='line'>               <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;couldn&#39;t identify the token&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">new_scanner</span> <span class="n">stm</span> <span class="o">=</span> <span class="o">{</span> <span class="n">last_token</span><span class="o">=</span><span class="nc">None</span><span class="o">;</span> <span class="n">stm</span><span class="o">=</span><span class="n">stm</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">match_next</span> <span class="n">s</span> <span class="o">=</span> <span class="k">match</span> <span class="n">s</span><span class="o">.</span><span class="n">last_token</span> <span class="k">with</span>
</span><span class='line'>                      <span class="nc">None</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">skip_blank_chars</span> <span class="n">s</span><span class="o">.</span><span class="n">stm</span> <span class="k">in</span> <span class="n">scan</span> <span class="n">s</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">tn</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">last_token</span> <span class="o">&lt;-</span> <span class="nc">None</span><span class="o">;</span> <span class="n">tn</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">match_token</span> <span class="n">s</span> <span class="n">t</span> <span class="o">=</span> <span class="n">match_next</span> <span class="n">s</span> <span class="o">=</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">next_token</span> <span class="n">s</span> <span class="o">=</span> <span class="k">match</span> <span class="n">s</span><span class="o">.</span><span class="n">last_token</span> <span class="k">with</span>
</span><span class='line'>                        <span class="nc">None</span> <span class="o">-&gt;</span>  <span class="o">(</span><span class="n">skip_blank_chars</span> <span class="n">s</span><span class="o">.</span><span class="n">stm</span><span class="o">;</span>
</span><span class='line'>                                  <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="n">scan</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                                  <span class="n">s</span><span class="o">.</span><span class="n">last_token</span> <span class="o">&lt;-</span> <span class="nc">Some</span> <span class="n">t</span><span class="o">;</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>                      <span class="o">|</span> <span class="nc">Some</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to generate an asm output we&rsquo;ll define an generator type which will contain the output channel
and variable locations <em>Hashtbl</em>. Each variable&rsquo;s location will be defined as an integer offset from <em>esp</em>
and since our micro language is simple we won&rsquo;t have to handle advanced aspects of variable scope and stack
handling.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* code generation *)</span>
</span><span class='line'><span class="k">type</span> <span class="n">generator</span> <span class="o">=</span> <span class="o">{</span> <span class="n">vars</span><span class="o">:</span> <span class="o">(</span><span class="kt">string</span><span class="o">,</span> <span class="kt">int</span><span class="o">)</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">t</span><span class="o">;</span> <span class="n">file</span><span class="o">:</span> <span class="kt">string</span><span class="o">;</span> <span class="n">chan</span><span class="o">:</span> <span class="n">out_channel</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">new_generator</span> <span class="n">file</span> <span class="o">=</span> <span class="k">let</span> <span class="n">fs</span> <span class="o">=</span> <span class="o">(</span><span class="nn">Filename</span><span class="p">.</span><span class="n">chop_extension</span> <span class="n">file</span><span class="o">)</span> <span class="o">^</span> <span class="s2">&quot;.s&quot;</span> <span class="k">in</span>
</span><span class='line'>                         <span class="o">{</span> <span class="n">vars</span><span class="o">=</span><span class="nn">Hashtbl</span><span class="p">.</span><span class="n">create</span> <span class="mi">100</span><span class="o">;</span> <span class="n">file</span><span class="o">=</span><span class="n">fs</span><span class="o">;</span> <span class="n">chan</span><span class="o">=</span><span class="n">open_out</span> <span class="n">fs</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">close_generator</span> <span class="n">g</span> <span class="o">=</span> <span class="n">close_out</span> <span class="n">g</span><span class="o">.</span><span class="n">chan</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">gen</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="n">output_string</span> <span class="n">g</span><span class="o">.</span><span class="n">chan</span> <span class="n">v</span><span class="o">;</span> <span class="n">output_string</span> <span class="n">g</span><span class="o">.</span><span class="n">chan</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll also need to distinguish between ordinary variables and an temporary ones.
Our temporary variables will be defined automatically and will start from <em>__temp</em> following
variable location offset. This way we won&rsquo;t be storing temporary variables in <em>Hashtbl</em> and will be
computing their offset from their name. We&rsquo;ll also define some additional generator helper functions to output asm code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">bottom_var</span> <span class="o">_</span> <span class="n">g</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="n">v</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;=</span> <span class="n">c</span> <span class="k">then</span> <span class="o">(</span><span class="n">v</span><span class="o">+</span><span class="mi">4</span><span class="o">)</span> <span class="k">else</span> <span class="n">c</span><span class="o">)</span> <span class="n">g</span><span class="o">.</span><span class="n">vars</span> <span class="mi">0</span>
</span><span class='line'><span class="k">let</span> <span class="n">empty_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="n">bottom_var</span> <span class="n">s</span> <span class="n">g</span><span class="o">)+(</span><span class="mi">4</span><span class="o">*(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">var_addr</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="k">if</span> <span class="nn">String</span><span class="p">.</span><span class="n">length</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="nn">String</span><span class="p">.</span><span class="n">sub</span> <span class="n">v</span> <span class="mi">0</span> <span class="mi">6</span> <span class="o">=</span> <span class="s2">&quot;__temp&quot;</span>
</span><span class='line'>                <span class="k">then</span> <span class="k">let</span> <span class="n">i</span> <span class="o">=</span> <span class="nn">String</span><span class="p">.</span><span class="n">sub</span> <span class="n">v</span> <span class="mi">6</span> <span class="o">((</span><span class="nn">String</span><span class="p">.</span><span class="n">length</span> <span class="n">v</span><span class="o">)</span> <span class="o">-</span> <span class="mi">6</span><span class="o">)</span> <span class="k">in</span> <span class="s2">&quot;[esp+&quot;</span> <span class="o">^</span> <span class="n">i</span> <span class="o">^</span> <span class="s2">&quot;]&quot;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                <span class="k">try</span> <span class="s2">&quot;[esp+&quot;</span> <span class="o">^</span> <span class="n">string_of_int</span> <span class="o">(</span><span class="nn">Hashtbl</span><span class="p">.</span><span class="n">find</span> <span class="n">g</span><span class="o">.</span><span class="n">vars</span> <span class="n">v</span><span class="o">)</span> <span class="o">^</span> <span class="s2">&quot;]&quot;</span>
</span><span class='line'>                <span class="k">with</span> <span class="nc">Not_found</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="o">(</span><span class="s2">&quot;identifier &quot;</span> <span class="o">^</span> <span class="n">v</span> <span class="o">^</span> <span class="s2">&quot; not defined&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="s2">&quot;dword &quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">var_addr</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span> <span class="o">=</span> <span class="nc">Identifier</span> <span class="o">(</span><span class="s2">&quot;__temp&quot;</span> <span class="o">^</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="o">(</span><span class="n">empty_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">is_alloc_var</span> <span class="o">_</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">mem</span> <span class="n">g</span><span class="o">.</span><span class="n">vars</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">alloc_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="k">if</span> <span class="n">is_alloc_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">then</span> <span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span>
</span><span class='line'>                      <span class="k">else</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="nn">Hashtbl</span><span class="p">.</span><span class="n">replace</span> <span class="n">g</span><span class="o">.</span><span class="n">vars</span> <span class="n">v</span> <span class="o">(</span><span class="n">empty_var</span> <span class="n">s</span> <span class="n">g</span> <span class="mi">1</span><span class="o">)</span> <span class="k">in</span> <span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="o">=</span> <span class="k">match</span> <span class="n">v</span> <span class="k">with</span>
</span><span class='line'>                         <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span>
</span><span class='line'>                       <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;identifier expected&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">op</span> <span class="n">g</span> <span class="n">opcode</span> <span class="n">a</span> <span class="o">=</span> <span class="n">gen</span> <span class="n">g</span> <span class="o">(</span><span class="s2">&quot;    &quot;</span> <span class="o">^</span> <span class="n">opcode</span> <span class="o">^</span> <span class="s2">&quot;  &quot;</span> <span class="o">^</span> <span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">op2</span> <span class="n">g</span> <span class="n">opcode</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">gen</span> <span class="n">g</span> <span class="o">(</span><span class="s2">&quot;    &quot;</span> <span class="o">^</span> <span class="n">opcode</span> <span class="o">^</span> <span class="s2">&quot;  &quot;</span> <span class="o">^</span> <span class="n">a</span> <span class="o">^</span> <span class="s2">&quot;, &quot;</span> <span class="o">^</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">push</span> <span class="n">g</span> <span class="n">a</span> <span class="o">=</span> <span class="n">op</span> <span class="n">g</span> <span class="s2">&quot;push&quot;</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in order to compile a source code we need to create a new generator, open an stream on a source file, parse it,
compile the asm source code using <em>nasm</em> and link the generated <em>.o</em> file into an elf executable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* compiling *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">compile</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">g</span> <span class="o">=</span> <span class="n">new_generator</span> <span class="n">file</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">stm</span> <span class="o">=</span> <span class="n">open_stream</span> <span class="n">file</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">out</span> <span class="o">=</span> <span class="nn">Filename</span><span class="p">.</span><span class="n">chop_extension</span> <span class="n">file</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">parse</span> <span class="n">stm</span> <span class="n">g</span><span class="o">;</span>
</span><span class='line'>        <span class="n">close_stream</span> <span class="n">stm</span><span class="o">;</span>
</span><span class='line'>        <span class="n">close_generator</span> <span class="n">g</span><span class="o">;</span>
</span><span class='line'>        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">command</span> <span class="o">(</span><span class="s2">&quot;nasm -f elf &quot;</span> <span class="o">^</span> <span class="n">g</span><span class="o">.</span><span class="n">file</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">command</span> <span class="o">(</span><span class="s2">&quot;gcc -o &quot;</span> <span class="o">^</span> <span class="n">out</span> <span class="o">^</span> <span class="s2">&quot; &quot;</span> <span class="o">^</span> <span class="n">out</span> <span class="o">^</span> <span class="s2">&quot;.o&quot;</span><span class="o">)</span> <span class="k">in</span> <span class="bp">()</span>
</span><span class='line'>    <span class="k">with</span> <span class="nc">Syntax_error</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">Format</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;syntax error: %s</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>            <span class="nn">Format</span><span class="p">.</span><span class="n">print_flush</span><span class="bp">()</span>
</span><span class='line'>       <span class="o">|</span> <span class="nc">Sys_error</span> <span class="o">_</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">print_string</span> <span class="s2">&quot;no such file found</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">help</span> <span class="bp">()</span> <span class="o">=</span> <span class="n">print_string</span> <span class="s2">&quot;micro &lt;file&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="bp">()</span> <span class="o">=</span> <span class="k">if</span> <span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">argv</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">then</span> <span class="n">help</span> <span class="bp">()</span>
</span><span class='line'>         <span class="k">else</span>
</span><span class='line'>             <span class="k">let</span> <span class="n">file</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">get</span> <span class="nn">Sys</span><span class="p">.</span><span class="n">argv</span> <span class="mi">1</span>
</span><span class='line'>             <span class="k">in</span>
</span><span class='line'>             <span class="nn">Format</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;compiling %s</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">file</span><span class="o">;</span>
</span><span class='line'>             <span class="nn">Format</span><span class="p">.</span><span class="n">print_flush</span> <span class="bp">()</span><span class="o">;</span>
</span><span class='line'>             <span class="n">compile</span> <span class="n">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our parsing method will be combined with semantics checking and will output <em>asm</em> code using generator functions which we will define later.
Program begins from <em>begin</em> keyword, ends with <em>end</em> keyword and has 0 or more statements in between.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">parse</span> <span class="n">stm</span> <span class="n">g</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">new_scanner</span> <span class="n">stm</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>            <span class="n">program</span> <span class="n">s</span> <span class="n">g</span>
</span><span class='line'>        <span class="k">with</span> <span class="nc">End_of_file</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;program reached end of file before end keyword&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">program</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Begin</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_begin</span> <span class="n">s</span> <span class="n">g</span> <span class="k">in</span>
</span><span class='line'>                    <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">statements</span> <span class="n">s</span> <span class="n">g</span> <span class="k">in</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">End</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_end</span> <span class="n">s</span> <span class="n">g</span> <span class="k">in</span> <span class="bp">()</span>
</span><span class='line'>                    <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;program should end with end keyword&quot;</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;program should start with begin keyword&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">statements</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">if</span> <span class="n">statement</span> <span class="n">s</span> <span class="n">g</span> <span class="k">then</span> <span class="n">statements</span> <span class="n">s</span> <span class="n">g</span> <span class="k">else</span> <span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each statement is either an <em>read</em>, <em>write</em> or an assignment to a variable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">statements</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">if</span> <span class="n">statement</span> <span class="n">s</span> <span class="n">g</span> <span class="k">then</span> <span class="n">statements</span> <span class="n">s</span> <span class="n">g</span> <span class="k">else</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">statement</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="n">next_token</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                  <span class="k">if</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>                      <span class="nc">Read</span> <span class="o">-&gt;</span> <span class="n">read</span> <span class="n">s</span> <span class="n">g</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Write</span> <span class="o">-&gt;</span> <span class="n">write</span> <span class="n">s</span> <span class="n">g</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="n">assignment</span> <span class="n">s</span> <span class="n">g</span>
</span><span class='line'>                    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>                  <span class="k">then</span>
</span><span class='line'>                      <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Semicolon</span> <span class="k">then</span> <span class="bp">true</span>
</span><span class='line'>                      <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;statement must end with semicolon&quot;</span>
</span><span class='line'>                  <span class="k">else</span> <span class="bp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each assignment statement has an identifier token on it&rsquo;s left side followed by an assignment token and expression
on the right hand side.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">assignment</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">match_next</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                     <span class="k">match</span> <span class="n">id</span> <span class="k">with</span>
</span><span class='line'>                        <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Assign</span> <span class="k">then</span>
</span><span class='line'>                                               <span class="k">let</span> <span class="n">new_var</span> <span class="o">=</span> <span class="k">if</span> <span class="n">is_alloc_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span> <span class="k">then</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">in</span>
</span><span class='line'>                                               <span class="k">let</span> <span class="n">id2</span> <span class="o">=</span> <span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="o">(</span><span class="mi">1</span><span class="o">+</span><span class="n">new_var</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>                                               <span class="k">match</span> <span class="n">id2</span> <span class="k">with</span>
</span><span class='line'>                                                   <span class="nc">Literal</span> <span class="n">l2</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_assign</span> <span class="n">s</span> <span class="n">g</span> <span class="n">id</span> <span class="n">id2</span> <span class="k">in</span> <span class="bp">true</span>
</span><span class='line'>                                                 <span class="o">|</span> <span class="nc">Identifier</span> <span class="n">i2</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_assign</span> <span class="n">s</span> <span class="n">g</span> <span class="n">id</span> <span class="n">id2</span> <span class="k">in</span> <span class="bp">true</span>
</span><span class='line'>                                                 <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;literal or identifier expected&quot;</span>
</span><span class='line'>                                         <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;assign symbol expected&quot;</span><span class="o">)</span>
</span><span class='line'>                      <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;identifier expected&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each expression statement is primary optionally followed by an operation token and another primary.
Primary might also be an expression in curly brackets.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">primary</span> <span class="n">s</span> <span class="o">=</span> <span class="k">match</span> <span class="o">(</span><span class="n">next_token</span> <span class="n">s</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                            <span class="nc">LeftParen</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">LeftParen</span> <span class="k">in</span>
</span><span class='line'>                                          <span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="o">(</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>                                          <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">RightParen</span> <span class="k">then</span> <span class="nc">Some</span> <span class="n">e</span>
</span><span class='line'>                                          <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;right paren expected in expression&quot;</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i</span><span class="o">)</span> <span class="k">in</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="nc">Literal</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="o">(</span><span class="nc">Literal</span> <span class="n">l</span><span class="o">)</span> <span class="k">in</span> <span class="nc">Some</span> <span class="o">(</span><span class="nc">Literal</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>        <span class="k">in</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lp</span> <span class="o">=</span> <span class="n">primary</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">lp</span> <span class="k">with</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">match</span> <span class="o">(</span><span class="n">next_token</span> <span class="n">s</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                             <span class="nc">AddOp</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">AddOp</span> <span class="k">in</span>
</span><span class='line'>                                      <span class="n">addop</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="o">(</span><span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="o">(</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>                           <span class="o">|</span> <span class="nc">SubOp</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">SubOp</span> <span class="k">in</span>
</span><span class='line'>                                      <span class="n">subop</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="o">(</span><span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="o">(</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>                           <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>          <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;literal or identifier expected&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our micro language supports only two operations on integers, addition and subtraction, but
it can be easily extended to support more.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">addop</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="n">r</span> <span class="o">=</span> <span class="k">match</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                            <span class="o">(</span><span class="nc">Literal</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Literal</span> <span class="o">(</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">generate_add</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="n">r</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">(</span><span class="nc">Literal</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Identifier</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">generate_add</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">r</span> <span class="n">l</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;expected literal or identifier for add operation&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">subop</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="n">r</span> <span class="o">=</span> <span class="k">match</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                            <span class="o">(</span><span class="nc">Literal</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Literal</span> <span class="o">(</span><span class="n">l1</span><span class="o">-</span><span class="n">l2</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">generate_sub</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="n">r</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">(</span><span class="nc">Literal</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Identifier</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">generate_sub</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">l</span> <span class="n">r</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;expected literal or identifier for sub operation&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>write</em> statement is just comma separated list of expressions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">write</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">let</span> <span class="k">rec</span> <span class="n">expressions</span> <span class="n">c</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="n">expression</span> <span class="n">s</span> <span class="n">g</span> <span class="mi">1</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>                    <span class="k">if</span> <span class="k">match</span> <span class="n">e</span> <span class="k">with</span>
</span><span class='line'>                        <span class="nc">Identifier</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_write</span> <span class="n">s</span> <span class="n">g</span> <span class="n">e</span> <span class="k">in</span> <span class="bp">true</span>
</span><span class='line'>                      <span class="o">|</span> <span class="nc">Literal</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_write</span> <span class="n">s</span> <span class="n">g</span> <span class="n">e</span> <span class="k">in</span> <span class="bp">true</span>
</span><span class='line'>                      <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">false</span>
</span><span class='line'>                    <span class="k">then</span> <span class="k">if</span> <span class="o">(</span><span class="n">next_token</span> <span class="n">s</span><span class="o">)</span> <span class="o">=</span> <span class="nc">Comma</span> <span class="k">then</span>
</span><span class='line'>                            <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Comma</span> <span class="k">in</span> <span class="n">expressions</span> <span class="o">(</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                         <span class="k">else</span> <span class="o">(</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">else</span> <span class="n">c</span>
</span><span class='line'>                <span class="k">in</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Write</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">LeftParen</span> <span class="k">then</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">expressions</span> <span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>                            <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">RightParen</span> <span class="k">then</span> <span class="bp">true</span>
</span><span class='line'>                            <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;right paren expected in write statement&quot;</span>
</span><span class='line'>                        <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;write statement expected atleast one expression&quot;</span>
</span><span class='line'>                    <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;left paren expected in write statement&quot;</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;write statement expected&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>read</em> statement is a comma separated list of identifiers</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">read</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Read</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">LeftParen</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">ids</span> <span class="o">=</span> <span class="n">identifiers</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">ids</span> <span class="o">=</span> <span class="bp">[]</span> <span class="k">then</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;read statement expects comma seperated identifier(s)&quot;</span>
</span><span class='line'>                    <span class="k">else</span> <span class="k">if</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">RightParen</span> <span class="k">then</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_reads</span> <span class="n">s</span> <span class="n">g</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="n">ids</span><span class="o">)</span> <span class="k">in</span> <span class="bp">true</span>
</span><span class='line'>                         <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;right paren expected in read statement&quot;</span>
</span><span class='line'>                <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;left paren expected in read statement&quot;</span>
</span><span class='line'>             <span class="k">else</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;read statement expected&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">identifiers</span> <span class="n">s</span> <span class="o">=</span> <span class="k">let</span> <span class="k">rec</span> <span class="n">idens</span> <span class="n">ids</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">match</span> <span class="o">(</span><span class="n">next_token</span> <span class="n">s</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                            <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_next</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                                            <span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">next_token</span> <span class="n">s</span> <span class="k">in</span>
</span><span class='line'>                                            <span class="k">if</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Comma</span> <span class="k">then</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">match_token</span> <span class="n">s</span> <span class="nc">Comma</span> <span class="k">in</span> <span class="n">idens</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i</span> <span class="o">::</span> <span class="n">ids</span><span class="o">)</span>
</span><span class='line'>                                            <span class="k">else</span> <span class="n">idens</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i</span> <span class="o">::</span> <span class="n">ids</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">ids</span>
</span><span class='line'>                    <span class="k">in</span> <span class="n">idens</span> <span class="bp">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it&rsquo;s finally time to generate some <em>asm</em> code, let&rsquo;s start from <em>begin</em> and <em>end</em> of our program.
Our program will preallocate 1000 bytes on stack for variables, since all of our variables are static.
We&rsquo;ll also need to define external libc functions <strong>scanf</strong> and <strong>printf</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">generate_begin</span> <span class="o">_</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gen</span> <span class="n">g</span>
</span><span class='line'><span class="s2">&quot;extern printf</span>
</span><span class='line'><span class="s2">extern scanf</span>
</span><span class='line'>
</span><span class='line'><span class="s2">section .data</span>
</span><span class='line'><span class="s2">    inf: db &#39;%d&#39;, 0</span>
</span><span class='line'><span class="s2">    ouf: db &#39;%d&#39;, 10, 0</span>
</span><span class='line'>
</span><span class='line'><span class="s2">section .text</span>
</span><span class='line'><span class="s2">    global main</span>
</span><span class='line'>
</span><span class='line'><span class="s2">main:</span>
</span><span class='line'><span class="s2">    sub   esp, 1000&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_end</span> <span class="o">_</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gen</span> <span class="n">g</span>
</span><span class='line'><span class="s2">&quot;    add   esp, 1000</span>
</span><span class='line'><span class="s2">exit:</span>
</span><span class='line'><span class="s2">    mov  eax, 1 ; sys_exit</span>
</span><span class='line'><span class="s2">    mov  ebx, 0</span>
</span><span class='line'><span class="s2">    int  80h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>read</em> and <em>write</em> statements will use libc <strong>scanf</strong> and <strong>printf</strong> functions to read integer variables
from <em>stdin</em> and output them on <em>stdout</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">generate_read</span> <span class="n">s</span> <span class="n">g</span> <span class="n">id</span> <span class="o">=</span> <span class="k">match</span> <span class="n">id</span> <span class="k">with</span>
</span><span class='line'>                            <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;lea&quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="o">(</span><span class="n">var_addr</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>                                             <span class="n">push</span> <span class="n">g</span> <span class="s2">&quot;eax&quot;</span><span class="o">;</span>
</span><span class='line'>                                             <span class="n">push</span> <span class="n">g</span> <span class="s2">&quot;inf&quot;</span><span class="o">;</span>
</span><span class='line'>                                             <span class="n">op</span> <span class="n">g</span> <span class="s2">&quot;call&quot;</span> <span class="s2">&quot;scanf&quot;</span><span class="o">;</span>
</span><span class='line'>                                             <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;add &quot;</span> <span class="s2">&quot;esp&quot;</span> <span class="s2">&quot;8&quot;</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate read called with invalid argument&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">generate_reads</span> <span class="n">s</span> <span class="n">g</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="n">generate_read</span> <span class="n">s</span> <span class="n">g</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_write</span> <span class="n">s</span> <span class="n">g</span> <span class="n">id</span> <span class="o">=</span> <span class="k">match</span> <span class="n">id</span> <span class="k">with</span>
</span><span class='line'>                            <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">push</span> <span class="n">g</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>                                             <span class="n">push</span> <span class="n">g</span> <span class="s2">&quot;ouf&quot;</span><span class="o">;</span>
</span><span class='line'>                                             <span class="n">op</span> <span class="n">g</span> <span class="s2">&quot;call&quot;</span> <span class="s2">&quot;printf&quot;</span><span class="o">;</span>
</span><span class='line'>                                             <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;add &quot;</span> <span class="s2">&quot;esp&quot;</span> <span class="s2">&quot;8&quot;</span><span class="o">)</span>
</span><span class='line'>                          <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate write called with invalid argument&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assignment statement is just an allocation of a variable followed by a copying variable from one location
into another. Our copy function understands literal variables and translates their values directly into <em>asm</em> code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">generate_assign</span> <span class="n">s</span> <span class="n">g</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="k">match</span> <span class="n">a</span> <span class="k">with</span>
</span><span class='line'>                                <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">alloc_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span> <span class="k">in</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">a</span> <span class="n">b</span>
</span><span class='line'>                              <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate assign called with invalid argument&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="k">match</span> <span class="n">a</span> <span class="k">with</span>
</span><span class='line'>                                <span class="nc">Identifier</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">match</span> <span class="n">b</span> <span class="k">with</span>
</span><span class='line'>                                                        <span class="nc">Identifier</span> <span class="n">i2</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;mov &quot;</span> <span class="s2">&quot;eax&quot;</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i2</span><span class="o">);</span>
</span><span class='line'>                                                                          <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;mov &quot;</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span><span class="o">)</span> <span class="s2">&quot;eax&quot;</span><span class="o">)</span>
</span><span class='line'>                                                      <span class="o">|</span> <span class="nc">Literal</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;mov &quot;</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i</span><span class="o">)</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>                                                      <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate copy called with invalid argument&quot;</span><span class="o">)</span>
</span><span class='line'>                              <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate copy called with invalid argument&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Addition and subtraction operations use temporary variables to add and subtract
values from two variables and return result</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">generate_add</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">id1</span> <span class="n">id2</span> <span class="o">=</span> <span class="k">match</span> <span class="o">(</span><span class="n">id1</span><span class="o">,</span> <span class="n">id2</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                                     <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Identifier</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="n">id1</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;add &quot;</span> <span class="n">vi</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i2</span><span class="o">)</span> <span class="k">in</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">|</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="n">id1</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;add &quot;</span> <span class="n">vi</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="n">l2</span><span class="o">)</span> <span class="k">in</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate exp called with invalid argument&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">generate_sub</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="n">id1</span> <span class="n">id2</span> <span class="o">=</span> <span class="k">match</span> <span class="o">(</span><span class="n">id1</span><span class="o">,</span> <span class="n">id2</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>                                     <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Identifier</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="n">id1</span> <span class="k">in</span>
</span><span class='line'>                                                                        <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;sub &quot;</span> <span class="n">vi</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i2</span><span class="o">)</span> <span class="k">in</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">|</span> <span class="o">(</span><span class="nc">Identifier</span> <span class="n">i1</span><span class="o">,</span> <span class="nc">Literal</span> <span class="n">l2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="n">id1</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;sub &quot;</span> <span class="n">vi</span> <span class="o">(</span><span class="n">string_of_int</span> <span class="n">l2</span><span class="o">)</span> <span class="k">in</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">|</span> <span class="o">(</span><span class="nc">Literal</span> <span class="n">l1</span><span class="o">,</span> <span class="nc">Identifier</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="k">let</span> <span class="n">v</span> <span class="o">=</span> <span class="n">temp_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">d</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">token_var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">generate_copy</span> <span class="n">s</span> <span class="n">g</span> <span class="n">v</span> <span class="n">id1</span> <span class="k">in</span>
</span><span class='line'>                                                                     <span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">op2</span> <span class="n">g</span> <span class="s2">&quot;sub &quot;</span> <span class="n">vi</span> <span class="o">(</span><span class="n">var</span> <span class="n">s</span> <span class="n">g</span> <span class="n">i2</span><span class="o">)</span> <span class="k">in</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>                                   <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">syntax_error</span> <span class="n">s</span> <span class="s2">&quot;generate exp called with invalid argument&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all of it! We now have a trivial micro compiler that generates binary executable file.
Source code can be found in my github <a href="https://github.com/troydm/micro/">micro</a> repo. Writing an compiler
is quite complex and entertaining task but it&rsquo;s definitely worth the time spend on!</p>

<p><img src="http://i.imgur.com/ArEvld4.png" alt="Kawaii Loli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making 30 years old Pascal code run again]]></title>
    <link href="http://troydm.github.io/blog/2014/01/26/making-30-years-old-pascal-code-run-again/"/>
    <updated>2014-01-26T22:48:00+04:00</updated>
    <id>http://troydm.github.io/blog/2014/01/26/making-30-years-old-pascal-code-run-again</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been interested in <a href="https://en.wikipedia.org/wiki/Logic_programming">Logic Programming</a>, notably in learning <a href="https://en.wikipedia.org/wiki/Prolog">Prolog</a>
so I&rsquo;m in a process of reading two great books, <a href="http://www.amazon.com/Prolog-Programming-Artificial-Intelligence-Bratko/dp/0201403757/">Programming for Artificial Intelligence</a> and
<a href="http://www.amazon.com/The-Art-Prolog-Programming-Techniques/dp/0262192500/">The Art of Prolog</a>. If you want to get a quick feel of <em>Prolog</em> I recommend you take a look at
Bernardo Pires&rsquo;s <a href="https://bernardopires.com/2013/10/try-logic-programming-a-gentle-introduction-to-prolog/">Gentle Introduction to Prolog</a> and <a href="http://prologomenon.wordpress.com/">Prologomenon</a> blog.
To put it simply <em>Prolog</em> is all about logic, deduction and backtracking</p>

<p><img src="http://i.imgur.com/Mwlmvyk.jpg" alt="Sherlock Loli" /></p>

<p>While browsing <a href="http://reddit.com/r/prolog">/r/prolog</a> I&rsquo;ve stumbled upon <a href="https://sites.google.com/site/prologforprogrammers/">Prolog for Programmers</a> originally published in 1985, an old book indeed
and honestly sometimes hard to follow. I can&rsquo;t recommend it as a starter book about <em>Prolog</em> but it&rsquo;s still quite interesting to read. However it has a whole two chapters describing implementation of
<em>Prolog</em> interpreter which is quite a complex task and sparkled my interest in continuing reading this book. Authors provide source code of two version of Prolog interpreter,
the one they originally wrote in <em>Pascal</em> back in 1983 and it&rsquo;s port to <em>C</em> in 2013 which, as stated on their website, was done because they couldn&rsquo;t compile old <em>Pascal</em> code
with <a href="http://www.freepascal.org/">Free Pascal Compiler</a> and because&hellip; well <em>Pascal</em> is quite out of fashion nowadays. Couldn&rsquo;t compile?! Well, challenge accepted!</p>

<!-- more -->


<p>We&rsquo;ll start with <em>toy.p</em> (original source code) and <em>syskernel</em> (boot file written in toy&rsquo;s original prolog syntax) file. Let&rsquo;s create a <em>Makefile</em> and try compiling the software with <em>fpc</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>############
</span><span class='line'>FPC=/usr/bin/fpc
</span><span class='line'>FPCFLAGS=-O3 
</span><span class='line'>############
</span><span class='line'>all: toy
</span><span class='line'>
</span><span class='line'>toy: toy.p 
</span><span class='line'>        $(FPC) $(FPCFLAGS) $&lt;
</span><span class='line'>        
</span><span class='line'>############
</span><span class='line'>clean:
</span><span class='line'>        rm -f toy*.o
</span><span class='line'>                
</span><span class='line'>distclean: clean
</span><span class='line'>        rm -f toy</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try running <em>make</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3  toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(260,1) Error: Goto statements aren't allowed between different procedures
</span><span class='line'>toy.p(306,1) Error: Goto statements aren't allowed between different procedures
</span><span class='line'>toy.p(348,18) Error: Incompatible type for arg no. 2: Got "Array[1..35] Of Char", expected "LongInt"
</span><span class='line'>toy.p(351,20) Error: Incompatible type for arg no. 2: Got "Array[1..35] Of Char", expected "LongInt"
</span><span class='line'>toy.p(453,21) Fatal: Syntax error, "identifier" expected but "STRING" found
</span><span class='line'>Fatal: Compilation aborted</span></code></pre></td></tr></table></div></figure>


<p>First two errors are <em>goto</em> statement related, let&rsquo;s see the source code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">label</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">;</span>  <span class="cm">(* error halt &amp; almost-fatal error recovery only *)</span>
</span><span class='line'>
</span><span class='line'><span class="k">procedure</span> <span class="nf">halt</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* this might be implementation-dependent *)</span>
</span><span class='line'><span class="k">begin</span>   <span class="nb">writeln</span><span class="o">;</span>   <span class="nb">writeln</span> <span class="p">(</span> <span class="s">&#39; ******toyprolog aborted******&#39;</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>    <span class="k">goto</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">procedure</span> <span class="nf">errror</span> <span class="p">(</span> <span class="n">id</span> <span class="o">:</span> <span class="n">errid</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="nb">writeln</span><span class="o">;</span>
</span><span class='line'>        <span class="nb">write</span> <span class="p">(</span> <span class="s">&#39; ++++++error : &#39;</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">id</span> <span class="k">in</span> <span class="p">[</span> <span class="n">ctovflw</span><span class="o">,</span> <span class="n">protovflw</span><span class="o">,</span> <span class="n">loadfile</span><span class="o">,</span> <span class="n">sysinit</span><span class="o">,</span> <span class="n">usereof</span> <span class="p">]</span> <span class="k">then</span> <span class="nb">halt</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">goto</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span> <span class="cm">(*********** toy prolog ************)</span>
</span><span class='line'>        <span class="n">initvars</span><span class="o">;</span>
</span><span class='line'>        <span class="n">loadsyskernel</span><span class="o">;</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span>      <span class="k">repeat</span>  <span class="n">readtogoal</span> <span class="p">(</span> <span class="n">goalstmnt</span><span class="o">,</span> <span class="n">ngoalvars</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>                <span class="n">resolve</span> <span class="p">(</span> <span class="n">goalstmnt</span><span class="o">,</span> <span class="n">ngoalvars</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">until</span> <span class="n">terminate</span><span class="o">;</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>      <span class="nb">closefile</span> <span class="p">(</span> <span class="k">true</span> <span class="p">)</span><span class="o">;</span>   <span class="nb">closefile</span> <span class="p">(</span> <span class="k">false</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, apparently back in the 80&rsquo;s you could jump between procedures in <em>Pascal</em> using <em>goto</em> statements, some primitive try/catch mechanism.
Now that&rsquo;s a neat thing but unfortunetly no, you can&rsquo;t do that anymore. Let&rsquo;s change this code to use exceptions. One thing to note we can substitute
<em>goto 1</em> with <em>halt(1)</em> which will make our program exit on critical error. Also we&rsquo;ll need to add <em>-S2</em> flag to <em>FPCFLAGS</em> variable in <em>Makefile</em> since we&rsquo;ll
be using exceptions which is related to classes mechanism of <em>Pascal</em>. And just to be sure we don&rsquo;t override any system procedures we&rsquo;ll rename our <em>halt</em> to
<em>haltsys</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="n">use</span> <span class="n">sysutils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="k">class</span><span class="p">(</span><span class="n">Exception</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">procedure</span> <span class="nf">haltsys</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* this might be implementation-dependent *)</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>    <span class="nb">writeln</span><span class="o">;</span>   <span class="nb">writeln</span> <span class="p">(</span> <span class="s">&#39; ******toyprolog aborted******&#39;</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>    <span class="nb">halt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">procedure</span> <span class="nf">errror</span> <span class="p">(</span> <span class="n">id</span> <span class="o">:</span> <span class="n">errid</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="nb">writeln</span><span class="o">;</span>
</span><span class='line'>        <span class="nb">write</span> <span class="p">(</span> <span class="s">&#39; ++++++error : &#39;</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">id</span> <span class="k">in</span> <span class="p">[</span> <span class="n">ctovflw</span><span class="o">,</span> <span class="n">protovflw</span><span class="o">,</span> <span class="n">loadfile</span><span class="o">,</span> <span class="n">sysinit</span><span class="o">,</span> <span class="n">usereof</span> <span class="p">]</span> <span class="k">then</span> <span class="n">haltsys</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">raise</span> <span class="n">error</span><span class="o">.</span><span class="n">create</span><span class="p">(</span> <span class="s">&#39;error&#39;</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">(*********** toy prolog ************)</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>    <span class="n">initvars</span><span class="o">;</span>
</span><span class='line'>    <span class="n">loadsyskernel</span><span class="o">;</span>
</span><span class='line'>    <span class="k">repeat</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>            <span class="n">readtogoal</span> <span class="p">(</span> <span class="n">goalstmnt</span><span class="o">,</span> <span class="n">ngoalvars</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resolve</span> <span class="p">(</span> <span class="n">goalstmnt</span><span class="o">,</span> <span class="n">ngoalvars</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="k">on</span> <span class="n">error</span> <span class="k">do</span> <span class="k">end</span><span class="o">;</span>
</span><span class='line'>    <span class="k">until</span> <span class="n">terminate</span><span class="o">;</span>
</span><span class='line'>    <span class="nb">closefile</span> <span class="p">(</span> <span class="k">true</span> <span class="p">)</span><span class="o">;</span>   <span class="nb">closefile</span> <span class="p">(</span> <span class="k">false</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try running <em>make</em> again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(349,18) Error: Incompatible type for arg no. 2: Got "Array[1..35] Of Char", expected "LongInt"
</span><span class='line'>toy.p(352,20) Error: Incompatible type for arg no. 2: Got "Array[1..35] Of Char", expected "LongInt"
</span><span class='line'>toy.p(454,21) Fatal: Syntax error, "identifier" expected but "STRING" found</span></code></pre></td></tr></table></div></figure>


<p>Good, now <em>goto</em> related error is gone and next we have is something bizzare, let&rsquo;s see the source code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">openfile</span> <span class="p">(</span> <span class="kp">name</span> <span class="o">:</span> <span class="n">ctx</span><span class="o">;</span>  <span class="n">forinput</span> <span class="o">:</span> <span class="kt">boolean</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* open the file (si or so according to 2nd parameter)</span>
</span><span class='line'><span class="cm">   whose name is given by a string in character table.</span>
</span><span class='line'><span class="cm">   a file is opened rewound. if a previous file is open, it is closed.  *)</span>
</span><span class='line'><span class="k">const</span>  <span class="nb">ln</span> <span class="o">=</span> <span class="mi">35</span><span class="o">;</span> <span class="cm">(* for RSX-11 *)</span>
</span><span class='line'><span class="k">var</span>   <span class="n">nm</span> <span class="o">:</span> <span class="k">array</span> <span class="p">[</span> <span class="mi">1</span><span class="o">..</span><span class="n">ln</span> <span class="p">]</span> <span class="k">of</span> <span class="kt">char</span><span class="o">;</span>   <span class="n">k</span> <span class="o">:</span> <span class="mi">1</span><span class="o">..</span><span class="n">ln</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">k</span><span class="o">:=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;&gt;</span> <span class="nb">ln</span> <span class="p">)</span> <span class="k">and</span> <span class="p">(</span> <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span> <span class="p">)</span> <span class="k">do</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">nm</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span><span class="o">;</span>   <span class="n">name</span><span class="o">:=</span> <span class="n">name</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>   <span class="n">k</span><span class="o">:=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span> <span class="k">then</span> <span class="n">errror</span> <span class="p">(</span> <span class="n">longfilename</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="o">:=</span> <span class="n">k</span> <span class="k">to</span> <span class="nb">ln</span> <span class="k">do</span> <span class="n">nm</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="o">:=</span> <span class="s">&#39; &#39;</span><span class="o">;</span>
</span><span class='line'>  <span class="nb">closefile</span> <span class="p">(</span> <span class="n">forinput</span> <span class="p">)</span><span class="o">;</span>               <span class="cm">(* only 1 file per stream *)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">forinput</span> <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>      <span class="nb">reset</span> <span class="p">(</span> <span class="n">si</span><span class="o">,</span> <span class="n">nm</span> <span class="p">)</span><span class="o">;</span>    <span class="n">seeing</span><span class="o">:=</span> <span class="k">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="nb">rewrite</span> <span class="p">(</span> <span class="n">so</span><span class="o">,</span> <span class="n">nm</span> <span class="p">)</span><span class="o">;</span>    <span class="n">telling</span><span class="o">:=</span> <span class="k">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">solinesize</span><span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="cm">(*openfile*)</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well apparently <em>reset</em> and <em>rewrite</em> procedures don&rsquo;t accept file name as second argument anymore,
instead we need to first <em>assign</em> file name and then open it for reading.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">openfile</span> <span class="p">(</span> <span class="kp">name</span> <span class="o">:</span> <span class="n">ctx</span><span class="o">;</span>  <span class="n">forinput</span> <span class="o">:</span> <span class="kt">boolean</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* open the file (si or so according to 2nd parameter)</span>
</span><span class='line'><span class="cm">   whose name is given by a string in character table.</span>
</span><span class='line'><span class="cm">   a file is opened rewound. if a previous file is open, it is closed.  *)</span>
</span><span class='line'><span class="k">const</span>  <span class="nb">ln</span> <span class="o">=</span> <span class="mi">35</span><span class="o">;</span> <span class="cm">(* for RSX-11 *)</span>
</span><span class='line'><span class="k">var</span>   <span class="n">nm</span> <span class="o">:</span> <span class="k">array</span> <span class="p">[</span> <span class="mi">1</span><span class="o">..</span><span class="n">ln</span> <span class="p">]</span> <span class="k">of</span> <span class="kt">char</span><span class="o">;</span>   <span class="n">k</span> <span class="o">:</span> <span class="mi">1</span><span class="o">..</span><span class="n">ln</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">k</span><span class="o">:=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;&gt;</span> <span class="nb">ln</span> <span class="p">)</span> <span class="k">and</span> <span class="p">(</span> <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span> <span class="p">)</span> <span class="k">do</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">nm</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span><span class="o">;</span>   <span class="n">name</span><span class="o">:=</span> <span class="n">name</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>   <span class="n">k</span><span class="o">:=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">ct</span> <span class="p">[</span> <span class="n">name</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span> <span class="k">then</span> <span class="n">errror</span> <span class="p">(</span> <span class="n">longfilename</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="o">:=</span> <span class="n">k</span> <span class="k">to</span> <span class="nb">ln</span> <span class="k">do</span> <span class="n">nm</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="o">:=</span> <span class="s">&#39; &#39;</span><span class="o">;</span>
</span><span class='line'>  <span class="nb">closefile</span> <span class="p">(</span> <span class="n">forinput</span> <span class="p">)</span><span class="o">;</span>               <span class="cm">(* only 1 file per stream *)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">forinput</span> <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>            <span class="n">assign</span><span class="p">(</span><span class="n">si</span><span class="o">,</span> <span class="n">nm</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>            <span class="nb">reset</span> <span class="p">(</span> <span class="n">si</span> <span class="p">)</span><span class="o">;</span>    <span class="n">seeing</span><span class="o">:=</span> <span class="k">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>            <span class="n">assign</span><span class="p">(</span><span class="n">so</span><span class="o">,</span> <span class="n">nm</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>            <span class="nb">rewrite</span> <span class="p">(</span> <span class="n">so</span> <span class="p">)</span><span class="o">;</span>    <span class="n">telling</span><span class="o">:=</span> <span class="k">true</span><span class="o">;</span>
</span><span class='line'>            <span class="n">solinesize</span><span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="cm">(*openfile*)</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try running <em>make</em> again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(456,21) Fatal: Syntax error, "identifier" expected but "STRING" found</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what we have here</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">function</span> <span class="nf">charlast</span> <span class="p">(</span> <span class="k">string</span> <span class="o">:</span> <span class="n">ctx</span> <span class="p">)</span>  <span class="o">:</span> <span class="n">ctx</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* locate the last character (except eos) of this string *)</span>
</span><span class='line'><span class="k">begin</span>   <span class="k">while</span>  <span class="n">ct</span> <span class="p">[</span> <span class="k">string</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span>  <span class="k">do</span> <span class="k">string</span><span class="o">:=</span> <span class="k">string</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">charlast</span><span class="o">:=</span> <span class="k">string</span> <span class="o">-</span> <span class="mi">1</span>     <span class="cm">(*correct because lowest string not empty*)</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t use <em>string</em> as identifier since it&rsquo;s used as a type keyword nowadays so let&rsquo;s change that</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">function</span> <span class="nf">charlast</span> <span class="p">(</span> <span class="nb">str</span> <span class="o">:</span> <span class="n">ctx</span> <span class="p">)</span>  <span class="o">:</span> <span class="n">ctx</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* locate the last character (except eos) of this str *)</span>
</span><span class='line'><span class="k">begin</span>   <span class="k">while</span>  <span class="n">ct</span> <span class="p">[</span> <span class="nb">str</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="nb">chr</span> <span class="p">(</span> <span class="n">eos</span> <span class="p">)</span>  <span class="k">do</span> <span class="nb">str</span><span class="o">:=</span> <span class="nb">str</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">charlast</span><span class="o">:=</span> <span class="nb">str</span> <span class="o">-</span> <span class="mi">1</span>     <span class="cm">(*correct because lowest str not empty*)</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try running <em>make</em> again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(922,7) Fatal: Syntax error, "identifier" expected but "is" found</span></code></pre></td></tr></table></div></figure>


<p>Ahh, same identifier problem but now with <em>is</em> keyword, let&rsquo;s quickly change that too.
Next is same problem but now with <em>class</em> keyword, okey fixed that one too. And again <em>is</em> keyword related problems, fixed.</p>

<p>And now running <em>make</em> again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(1951,36) Error: Identifier not found "success"
</span><span class='line'>toy.p(1956,10) Error: Identifier not found "id"
</span><span class='line'>toy.p(1957,18) Error: Constant and CASE types do not match
</span><span class='line'>toy.p(1957,27) Error: Identifier not found "success"
</span><span class='line'>toy.p(1958,8) Error: Constant and CASE types do not match
</span><span class='line'>toy.p(1959,18) Error: Constant and CASE types do not match
</span><span class='line'>toy.p(1960,18) Error: Constant and CASE types do not match
</span><span class='line'>........</span></code></pre></td></tr></table></div></figure>


<p>ZOMFG, tons of errors :( no worries no worries let&rsquo;s see the code!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">sysroutcall</span> <span class="cm">(* ( id : sysroutid;  var success, stop : boolean ) *)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* perform a system routine call *)</span>
</span><span class='line'><span class="k">var</span>   <span class="n">k</span> <span class="o">:</span> <span class="n">nsysparam</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">syserror</span><span class="o">:=</span> <span class="k">false</span><span class="o">;</span>   <span class="n">success</span><span class="o">:=</span> <span class="k">true</span><span class="o">;</span>     <span class="cm">(* might change yet *)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">k</span><span class="o">:=</span> <span class="mi">1</span> <span class="k">to</span> <span class="n">getarity</span> <span class="p">(</span> <span class="n">ccall</span> <span class="p">)</span> <span class="k">do</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">spar</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">argument</span> <span class="p">(</span> <span class="n">ccall</span><span class="o">,</span> <span class="n">ancenv</span><span class="o">,</span> <span class="n">k</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">isint</span><span class="p">(</span> <span class="n">spar</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="p">)</span> <span class="k">then</span> <span class="n">sparv</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span><span class="o">:=</span> <span class="n">intval</span><span class="p">(</span> <span class="n">spar</span> <span class="p">[</span> <span class="n">k</span> <span class="p">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">id</span> <span class="k">of</span>
</span><span class='line'>  <span class="n">idfail</span>          <span class="o">:</span> <span class="n">success</span><span class="o">:=</span> <span class="k">false</span><span class="o">;</span>      <span class="cm">(* keep this as first  *)</span>
</span><span class='line'>  <span class="n">idtag</span> <span class="o">,</span>
</span><span class='line'>  <span class="n">idcall</span>          <span class="o">:</span> <span class="o">;</span>             <span class="cm">(* never called ! (cf. control) *)</span>
</span><span class='line'>  <span class="n">idslash</span>         <span class="o">:</span> <span class="n">slash</span><span class="o">;</span>
</span><span class='line'>  <span class="n">idtagcut</span>        <span class="o">:</span> <span class="n">tagcut</span> <span class="p">(</span> <span class="n">success</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="n">idtagfail</span>       <span class="o">:</span> <span class="n">tagfail</span> <span class="p">(</span> <span class="n">success</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="n">idtagexit</span>       <span class="o">:</span> <span class="n">tagexit</span> <span class="p">(</span> <span class="n">success</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="n">idancestor</span>      <span class="o">:</span> <span class="n">ancestor</span> <span class="p">(</span> <span class="n">success</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>     <span class="o">.........</span>
</span><span class='line'>  <span class="k">end</span> <span class="cm">(*case*)</span>
</span><span class='line'><span class="k">end</span> <span class="cm">(*sysroutcall*)</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ehh&hellip; why is the procedure argument block commented? Wait we have another <em>sysroutcall</em>
defined in a file previously which is&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">sysroutcall</span> <span class="p">(</span> <span class="n">id</span> <span class="o">:</span> <span class="n">sysroutid</span><span class="o">;</span>  <span class="k">var</span> <span class="n">success</span><span class="o">,</span> <span class="n">stop</span> <span class="o">:</span> <span class="kt">boolean</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="kp">forward</span><span class="o">;</span> <span class="cm">(*----------------------------------------------------------*)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahh it&rsquo;s just a forward definition, well aparently nowadays if you are defining a forward
definition that doesn&rsquo;t mean you don&rsquo;t need to specify procedure arguments again.
Let&rsquo;s uncomment the arguments and try running <em>make</em> again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(2132,33) Fatal: Syntax error, ":" expected but ";" found
</span><span class='line'>Fatal: Compilation aborted</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see the code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">function</span> <span class="nf">rdterm</span> <span class="cm">(*  : integer *)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* read a term and return a prot for a non-var or a negated offset for a var.</span>
</span><span class='line'><span class="cm">   sequences processed recursively to allow proper ground prot treatment.   *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">sign</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="mi">1</span><span class="o">;</span>   <span class="n">varoff</span> <span class="o">:</span> <span class="n">varnumb</span><span class="o">;</span>   <span class="n">prot</span> <span class="o">:</span> <span class="kt">integer</span><span class="o">;</span>   <span class="n">dot</span> <span class="o">:</span> <span class="n">protx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">skipbl</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function result type is commented, probably a typo, let&rsquo;s uncomment it and run <em>make</em> again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(2138,22) Warning: Function result variable does not seem to initialized
</span><span class='line'>toy.p(2280,26) Error: Incompatible type for arg no. 2: Got "Constant String", expected "LongInt"
</span><span class='line'>toy.p(2314,9) Error: Label used but not defined "2"
</span><span class='line'>toy.p(2314,9) Fatal: Syntax error, ";" expected but "REPEAT" found
</span><span class='line'>Fatal: Compilation aborted</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a weird error. Let&rsquo;s examine the code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">function</span> <span class="nf">rdterm</span>   <span class="o">:</span> <span class="kt">integer</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* read a term and return a prot for a non-var or a negated offset for a var.</span>
</span><span class='line'><span class="cm">   sequences processed recursively to allow proper ground prot treatment.   *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">sign</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="mi">1</span><span class="o">;</span>   <span class="n">varoff</span> <span class="o">:</span> <span class="n">varnumb</span><span class="o">;</span>   <span class="n">prot</span> <span class="o">:</span> <span class="kt">integer</span><span class="o">;</span>   <span class="n">dot</span> <span class="o">:</span> <span class="n">protx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">skipbl</span><span class="o">;</span>
</span><span class='line'>        <span class="nb">writeln</span><span class="p">(</span><span class="s">&#39;rdterm &#39;</span><span class="o">,</span><span class="n">cch</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;(&#39;</span> <span class="k">then</span> <span class="k">begin</span>         <span class="cm">(* eg.  a . (b . c) . d *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="n">rdterm</span><span class="o">;</span>   <span class="n">skipbl</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cch</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;)&#39;</span> <span class="k">then</span> <span class="n">synterr</span><span class="o">;</span>   <span class="n">rd</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;_&#39;</span> <span class="k">then</span> <span class="k">begin</span>                 <span class="cm">(* a dummy variable *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="n">dumvarx</span>            <span class="cm">(* treated as non-var here *)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;:&#39;</span> <span class="k">then</span> <span class="k">begin</span>                 <span class="cm">(* a variable *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">varoff</span><span class="o">:=</span> <span class="n">rddigits</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="o">-</span> <span class="n">varoff</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">varoff</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">nclvars</span> <span class="k">then</span> <span class="n">nclvars</span><span class="o">:=</span> <span class="n">varoff</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;+&#39;</span> <span class="p">)</span> <span class="k">or</span> <span class="p">(</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span> <span class="p">)</span> <span class="k">or</span> <span class="p">(</span> <span class="n">cc</span> <span class="p">[</span><span class="n">cch</span><span class="p">]</span> <span class="o">=</span> <span class="n">cdigit</span> <span class="p">)</span> <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span> <span class="k">then</span> <span class="nb">sign</span><span class="o">:=</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="nb">sign</span><span class="o">:=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cc</span> <span class="p">[</span> <span class="n">cch</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="n">cdigit</span> <span class="k">then</span> <span class="n">rd</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">(* number itself processed as positive :  this</span>
</span><span class='line'><span class="cm">        causes loss of smallest integer in two&#39;s complement *)</span>
</span><span class='line'>      <span class="n">prot</span><span class="o">:=</span> <span class="n">newintprot</span> <span class="p">(</span> <span class="nb">sign</span> <span class="o">*</span> <span class="n">rddigits</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>            <span class="n">prot</span><span class="o">:=</span> <span class="n">rdnonvarint</span><span class="o">;</span>
</span><span class='line'>            <span class="n">skipbl</span>
</span><span class='line'>        <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;.&#39;</span> <span class="k">then</span> <span class="n">rdterm</span><span class="o">:=</span> <span class="n">prot</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>                      <span class="cm">(* a sequence, as it turns out *)</span>
</span><span class='line'>      <span class="n">dot</span><span class="o">:=</span> <span class="n">initprot</span> <span class="p">(</span> <span class="n">std</span> <span class="p">[</span><span class="n">atmdot</span><span class="p">]</span> <span class="p">)</span><span class="o">;</span>   <span class="n">mkarg</span> <span class="p">(</span> <span class="n">dot</span><span class="o">,</span> <span class="n">car</span><span class="o">,</span> <span class="n">prot</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">skipcombl</span><span class="o">;</span>
</span><span class='line'>      <span class="n">mkarg</span> <span class="p">(</span> <span class="n">dot</span><span class="o">,</span> <span class="n">cdr</span><span class="o">,</span> <span class="n">rdterm</span> <span class="p">)</span><span class="o">;</span>   <span class="n">rdterm</span><span class="o">:=</span> <span class="n">wrapprot</span> <span class="p">(</span> <span class="n">dot</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="cm">(*rdterm*)</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems like <em>fpc</em> can&rsquo;t distinguesh between a recursive function call and a function result value,
so let&rsquo;s add some brackets for function calls.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">function</span> <span class="nf">rdterm</span>   <span class="o">:</span> <span class="kt">integer</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* read a term and return a prot for a non-var or a negated offset for a var.</span>
</span><span class='line'><span class="cm">   sequences processed recursively to allow proper ground prot treatment.   *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">sign</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="mi">1</span><span class="o">;</span>   <span class="n">varoff</span> <span class="o">:</span> <span class="n">varnumb</span><span class="o">;</span>   <span class="n">prot</span> <span class="o">:</span> <span class="kt">integer</span><span class="o">;</span>   <span class="n">dot</span> <span class="o">:</span> <span class="n">protx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="n">skipbl</span><span class="o">;</span>
</span><span class='line'>        <span class="nb">writeln</span><span class="p">(</span><span class="s">&#39;rdterm &#39;</span><span class="o">,</span><span class="n">cch</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;(&#39;</span> <span class="k">then</span> <span class="k">begin</span>         <span class="cm">(* eg.  a . (b . c) . d *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="n">rdterm</span><span class="p">()</span><span class="o">;</span>   <span class="n">skipbl</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cch</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;)&#39;</span> <span class="k">then</span> <span class="n">synterr</span><span class="o">;</span>   <span class="n">rd</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;_&#39;</span> <span class="k">then</span> <span class="k">begin</span>                 <span class="cm">(* a dummy variable *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="n">dumvarx</span>            <span class="cm">(* treated as non-var here *)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;:&#39;</span> <span class="k">then</span> <span class="k">begin</span>                 <span class="cm">(* a variable *)</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">varoff</span><span class="o">:=</span> <span class="n">rddigits</span><span class="o">;</span>   <span class="n">prot</span><span class="o">:=</span> <span class="o">-</span> <span class="n">varoff</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">varoff</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">nclvars</span> <span class="k">then</span> <span class="n">nclvars</span><span class="o">:=</span> <span class="n">varoff</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;+&#39;</span> <span class="p">)</span> <span class="k">or</span> <span class="p">(</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span> <span class="p">)</span> <span class="k">or</span> <span class="p">(</span> <span class="n">cc</span> <span class="p">[</span><span class="n">cch</span><span class="p">]</span> <span class="o">=</span> <span class="n">cdigit</span> <span class="p">)</span> <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cch</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span> <span class="k">then</span> <span class="nb">sign</span><span class="o">:=</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="nb">sign</span><span class="o">:=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">cc</span> <span class="p">[</span> <span class="n">cch</span> <span class="p">]</span> <span class="o">&lt;&gt;</span> <span class="n">cdigit</span> <span class="k">then</span> <span class="n">rd</span><span class="o">;</span>
</span><span class='line'>      <span class="cm">(* number itself processed as positive :  this</span>
</span><span class='line'><span class="cm">        causes loss of smallest integer in two&#39;s complement *)</span>
</span><span class='line'>      <span class="n">prot</span><span class="o">:=</span> <span class="n">newintprot</span> <span class="p">(</span> <span class="nb">sign</span> <span class="o">*</span> <span class="n">rddigits</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>            <span class="n">prot</span><span class="o">:=</span> <span class="n">rdnonvarint</span><span class="o">;</span>
</span><span class='line'>            <span class="n">skipbl</span>
</span><span class='line'>        <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">cch</span> <span class="o">&lt;&gt;</span> <span class="s">&#39;.&#39;</span> <span class="k">then</span> <span class="n">rdterm</span><span class="o">:=</span> <span class="n">prot</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>                      <span class="cm">(* a sequence, as it turns out *)</span>
</span><span class='line'>      <span class="n">dot</span><span class="o">:=</span> <span class="n">initprot</span> <span class="p">(</span> <span class="n">std</span> <span class="p">[</span><span class="n">atmdot</span><span class="p">]</span> <span class="p">)</span><span class="o">;</span>   <span class="n">mkarg</span> <span class="p">(</span> <span class="n">dot</span><span class="o">,</span> <span class="n">car</span><span class="o">,</span> <span class="n">prot</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'>      <span class="n">rd</span><span class="o">;</span>   <span class="n">skipcombl</span><span class="o">;</span>
</span><span class='line'>      <span class="n">mkarg</span> <span class="p">(</span> <span class="n">dot</span><span class="o">,</span> <span class="n">cdr</span><span class="o">,</span> <span class="n">rdterm</span><span class="p">()</span> <span class="p">)</span><span class="o">;</span>   <span class="n">rdterm</span><span class="o">:=</span> <span class="n">wrapprot</span> <span class="p">(</span> <span class="n">dot</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span> <span class="cm">(*rdterm*)</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>toy.p(2280,26) Error: Incompatible type for arg no. 2: Got "Constant String", expected "LongInt"
</span><span class='line'>toy.p(2322) Fatal: There were 1 errors compiling module, stopping
</span><span class='line'>Fatal: Compilation aborted</span></code></pre></td></tr></table></div></figure>


<p>Ahh we are getting closer to the end, same <em>reset</em> related error, let&rsquo;s fix it by adding <em>assign</em>
and run <em>make</em> again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/fpc -O3 -S2 toy.p
</span><span class='line'>Free Pascal Compiler version 2.4.0-2ubuntu1.10.04 [2011/06/17] for i386
</span><span class='line'>Copyright (c) 1993-2009 by Florian Klaempfl
</span><span class='line'>Target OS: Linux for i386
</span><span class='line'>Compiling toy.p
</span><span class='line'>Linking toy
</span><span class='line'>/usr/bin/ld: warning: link.res contains output sections; did you forget -T?
</span><span class='line'>2322 lines compiled, 0.3 sec</span></code></pre></td></tr></table></div></figure>


<p>And we did it! Congratulations, it compiles. Let&rsquo;s try running <em>toy</em> executable!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash$ ./toy
</span><span class='line'>Toy-Prolog listening:
</span><span class='line'>?- X=1.
</span><span class='line'>X = 1
</span><span class='line'>;
</span><span class='line'>no
</span><span class='line'>?- display('Hello World!'), nl.
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>Well it runs, but function call crashes the toy prolog interpreter.
Let&rsquo;s investigate this issue using <em>gdb</em> debugger.
We&rsquo;ll need to compile code with <em>-g</em> flag to do actual debugging so just add
it to your <em>FPCFLAGS</em> variable in <em>Makefile</em></p>

<p>Now let&rsquo;s start debugging</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash$ gdb ./toy
</span><span class='line'>GNU gdb (GDB) 7.1-ubuntu
</span><span class='line'>Copyright (C) 2010 Free Software Foundation, Inc.
</span><span class='line'>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html>
</span><span class='line'>(gdb) run
</span><span class='line'>Starting program: /home/troydm/projects/toytest/toy 
</span><span class='line'>Toy-Prolog listening:
</span><span class='line'>?- a.     
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x0804a831 in PURGETRAIL (LOW=37294) at toy.p:1224
</span><span class='line'>1224                    if (tt [high] &lt; frozenvars) or (tt [high] > frozenheap)</span></code></pre></td></tr></table></div></figure>


<p>It seems <em>purgetail</em> procedure is at fault.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">purgetrail</span> <span class="p">(</span> <span class="nb">low</span> <span class="o">:</span> <span class="n">ttx</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* remove unnecessary trail entries at and above low , either after</span>
</span><span class='line'><span class="cm">   a successful unifyordont call or after popping backtrack-points in</span>
</span><span class='line'><span class="cm">   a non-backtracking context ( unfreeze ). this is necessary, as</span>
</span><span class='line'><span class="cm">   unfrozen vars might be moved or destroyed - it also saves trail space. *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">high</span> <span class="o">:</span> <span class="n">ttx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="k">for</span> <span class="nb">high</span><span class="o">:=</span> <span class="nb">low</span> <span class="k">to</span> <span class="n">ttop</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">frozenvars</span><span class="p">)</span> <span class="k">or</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">frozenheap</span><span class="p">)</span>
</span><span class='line'>                                                                <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>                    <span class="n">tt</span> <span class="p">[</span> <span class="nb">low</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">tt</span> <span class="p">[</span> <span class="nb">high</span> <span class="p">]</span><span class="o">;</span>   <span class="nb">low</span><span class="o">:=</span> <span class="nb">low</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="n">ttop</span><span class="o">:=</span> <span class="nb">low</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, it&rsquo;s starts from <em>low</em> and goes till <em>ttop-1</em> to remove unused trail entries from array.
Let&rsquo;s add some <em>writeln</em> output of <em>low</em> and <em>ttop</em> values to see what makes it really crash.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">purgetrail</span> <span class="p">(</span> <span class="nb">low</span> <span class="o">:</span> <span class="n">ttx</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* remove unnecessary trail entries at and above low , either after</span>
</span><span class='line'><span class="cm">   a successful unifyordont call or after popping backtrack-points in</span>
</span><span class='line'><span class="cm">   a non-backtracking context ( unfreeze ). this is necessary, as</span>
</span><span class='line'><span class="cm">   unfrozen vars might be moved or destroyed - it also saves trail space. *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">high</span> <span class="o">:</span> <span class="n">ttx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>        <span class="nb">writeln</span><span class="p">(</span><span class="s">&#39;low = &#39;</span><span class="o">,</span><span class="nb">low</span><span class="o">,</span><span class="s">&#39; ttop = &#39;</span><span class="o">,</span> <span class="n">ttop</span><span class="p">)</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="nb">high</span><span class="o">:=</span> <span class="nb">low</span> <span class="k">to</span> <span class="n">ttop</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">frozenvars</span><span class="p">)</span> <span class="k">or</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">frozenheap</span><span class="p">)</span>
</span><span class='line'>                                                                    <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>                        <span class="n">tt</span> <span class="p">[</span> <span class="nb">low</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">tt</span> <span class="p">[</span> <span class="nb">high</span> <span class="p">]</span><span class="o">;</span>   <span class="nb">low</span><span class="o">:=</span> <span class="nb">low</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">end</span><span class="o">;</span>
</span><span class='line'>        <span class="n">ttop</span><span class="o">:=</span> <span class="nb">low</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run <em>toy</em> again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash$ ./toy
</span><span class='line'>Toy-Prolog listening:
</span><span class='line'>?- a.
</span><span class='line'>low = 1 ttop = 3
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 3
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 4
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 1
</span><span class='line'>low = 0 ttop = 0
</span><span class='line'>Segmentation fault</span></code></pre></td></tr></table></div></figure>


<p>It crashes when both values are 0&rsquo;s. Hmm it seems we don&rsquo;t need to iterate anything unless low &lt; ttop,
Since the trail array is empty, so let&rsquo;s add this fix into <em>purgetrail</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='pascal'><span class='line'><span class="k">procedure</span> <span class="nf">purgetrail</span> <span class="p">(</span> <span class="nb">low</span> <span class="o">:</span> <span class="n">ttx</span> <span class="p">)</span><span class="o">;</span>
</span><span class='line'><span class="cm">(* remove unnecessary trail entries at and above low , either after</span>
</span><span class='line'><span class="cm">   a successful unifyordont call or after popping backtrack-points in</span>
</span><span class='line'><span class="cm">   a non-backtracking context ( unfreeze ). this is necessary, as</span>
</span><span class='line'><span class="cm">   unfrozen vars might be moved or destroyed - it also saves trail space. *)</span>
</span><span class='line'><span class="k">var</span>   <span class="nb">high</span> <span class="o">:</span> <span class="n">ttx</span><span class="o">;</span>
</span><span class='line'><span class="k">begin</span>   <span class="k">if</span> <span class="nb">low</span> <span class="o">&lt;</span> <span class="n">ttop</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">for</span> <span class="nb">high</span><span class="o">:=</span> <span class="nb">low</span> <span class="k">to</span> <span class="n">ttop</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">frozenvars</span><span class="p">)</span> <span class="k">or</span> <span class="p">(</span><span class="n">tt</span> <span class="p">[</span><span class="nb">high</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">frozenheap</span><span class="p">)</span>
</span><span class='line'>                                  <span class="k">then</span> <span class="k">begin</span>
</span><span class='line'>          <span class="n">tt</span> <span class="p">[</span> <span class="nb">low</span> <span class="p">]</span> <span class="o">:=</span>  <span class="n">tt</span> <span class="p">[</span> <span class="nb">high</span> <span class="p">]</span><span class="o">;</span>   <span class="nb">low</span><span class="o">:=</span> <span class="nb">low</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span><span class="o">;</span>
</span><span class='line'>  <span class="n">ttop</span><span class="o">:=</span> <span class="nb">low</span>
</span><span class='line'><span class="k">end</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s run <em>make</em> and then run <em>toy</em> interpreter again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash$ ./toy
</span><span class='line'>Toy-Prolog listening:
</span><span class='line'>?- display('Hello World!'), nl.
</span><span class='line'>Hello World!
</span><span class='line'>yes</span></code></pre></td></tr></table></div></figure>


<p>And we did it! It works :) It might have some other bugs since it&rsquo;s an old software but I haven&rsquo;t encountered any more yet.
I&rsquo;ve also ported <em>btoy.p</em> the same way stumbling upon same kind of errors and same <em>purgetrail</em> bug.</p>

<p><img src="http://i.imgur.com/NX5NdN5.png" alt="Hyouka" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processing &amp; Broadcasting Financial Data in Scheme]]></title>
    <link href="http://troydm.github.io/blog/2013/09/04/processing-and-broadcasting-financial-data-in-scheme/"/>
    <updated>2013-09-04T21:44:00+04:00</updated>
    <id>http://troydm.github.io/blog/2013/09/04/processing-and-broadcasting-financial-data-in-scheme</id>
    <content type="html"><![CDATA[<p>Any software developer who worked in financial industry will tell you that there are
few key requirements to programming applications for real time market. Applications should be as fast as possible and
they should be as easily modifiable as possible. First requirement is essential since getting and processing information
takes time and sending processed information takes even additional precious time, and in financial world time equals money.
Second requirement is determined by constantly changing business rules imposed on data processing.</p>

<p><img src="http://i.imgur.com/OErpvNu.png" alt="(eq? 'money 'power)" /></p>

<!-- more -->


<p>Correctly choosing programming language for such applications is key to success. Since first requirement already suggests using languages
that produce native binary executables we might start thinking to use popular languages such as <strong>C</strong>, <strong>C++</strong>. However developing networked applications
in <strong>C</strong> or <strong>C++</strong> takes more time than in languages such as <strong>Java</strong> or <strong>C#</strong>, and applications developed aren&rsquo;t as easy modifiable as it may seem, so these languages
don&rsquo;t comply with our second requirement. What alternatives do we have? Since it&rsquo;s financial world and we want our applications to be absolutely correct, we might
want to choose functional programming language and benefit of their advantages. So we have a choice between popular functional programming languages
<strong>Haskell</strong>, <strong>OCaml</strong> and <strong>Scheme</strong>. <strong>OCaml</strong> is well known to
be used by a big financial company <a href="http://janestreet.com/">Janestreet</a> and is a really good choice, it has <strong>ML</strong> like syntax which is really easy to get used to.
<strong>Haskell</strong> is extremely popular however it&rsquo;s laziness implies some overcomplicated
programming and some performance penalties we don&rsquo;t want to have. <strong>Scheme</strong> is very simple language with <strong>Lisp</strong>-like syntax that is very easy to start programming with and it&rsquo;s programs
are very easily modifiable. <strong>Scheme</strong> has many implementations that have it&rsquo;s own libraries and it&rsquo;s own pros and cons. <strong>Scheme</strong>&rsquo;s only downside is that it&rsquo;s not statically typed so it doesn&rsquo;t catches some obvious
compile-time errors, but as long as our application works fine everything is ok! Further on let&rsquo;s consider that we&rsquo;ve chosen <strong>Scheme</strong> as our language. Other languages have it&rsquo;s own benefits but for our
needs it&rsquo;s the most suited choice, since we want to start developing as fast as possible. Since we want to produce native binary executables we&rsquo;ll limit our choice
on <a href="http://www.call-cc.org/">Chicken Scheme</a> which produces very efficient binary applications and is very popular.</p>

<p>So let&rsquo;s consider our hypothetical but very common situation where we want to quickly develop an application that gets a stream of some data (let&rsquo;s imagine it&rsquo;s a real time financial market data)
that we can get by connecting to some arbitrary tcp host:port. The data that we&rsquo;ll get will be parsed, processed and will be broadcasted to all clients that will connect to our small application
using tcp protocol. So we need to develop some small tcp client and broadcasting server black box.</p>

<p><img src="http://i.imgur.com/T4gMsTT.png" alt="black box" /></p>

<p><a href="http://www.call-cc.org/">Chicken Scheme</a> has a system called <a href="http://wiki.call-cc.org/chicken-projects/egg-index-4.html">Eggs</a> which is a common way to distribute community extensions.
We&rsquo;ll be using two extensions to ease our task of developing our application. One is called <a href="http://wiki.call-cc.org/eggref/4/synch">synch</a> which is a set of some useful functions to
work with concurrent code in <a href="http://www.call-cc.org/">Chicken Scheme</a>. The other one we&rsquo;ll be using is called <a href="http://wiki.call-cc.org/eggref/4/mailbox-threads">mailbox-threads</a> which
is a convenient <strong>Erlang</strong>-like message passing framework. So let&rsquo;s install those extension by typing following in our console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chicken-install synch
</span><span class='line'>chicken-install mailbox-threads
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s start writing our application. Create a file called <em>myapp.scm</em>. First thing we need to do is load our extensions.
Also we&rsquo;ll be using some functions from <a href="http://srfi.schemers.org/srfi-18/srfi-18.html">srfi-18</a> and <a href="http://srfi.schemers.org/srfi-1/srfi-1.html">srfi-1</a>
for multi threading and some convenient list data manipulations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">require-extension</span> <span class="nv">tcp</span> <span class="nv">posix</span> <span class="nv">synch</span> <span class="nv">mailbox-threads</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">require-extension</span> <span class="p">(</span><span class="nf">only</span> <span class="nv">srfi-18</span> <span class="nv">make-mutex</span> <span class="nv">make-thread</span> <span class="nv">thread-start!</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">require-extension</span> <span class="p">(</span><span class="nf">only</span> <span class="nv">srfi-1</span> <span class="nv">delete</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we need a way to get our data and process it. We&rsquo;ll be using functions <em>tcp-connect</em> and <em>read-line</em> to connect to our host and read data line by line.
Also we&rsquo;ll define some arbitrary processing function that will not do any processing and just broadcast data. I don&rsquo;t want to talk about processing in this post but rather focus
on getting data and distributing it, so in the end we&rsquo;ll have just a simple tcp duplicator example in <strong>Scheme</strong>. But you can do any kind of data processing by modifying
<em>process-data</em> function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">connect-to-host</span> <span class="s">&quot;host&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">connect-to-port</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start-data-feeder</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">handle-exceptions</span> <span class="nv">ex</span>
</span><span class='line'>            <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="nf">print</span> <span class="s">&quot;error occurred while connecting, trying to reconnect&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">sleep</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">in</span> <span class="p">(</span><span class="nf">tcp-connect</span> <span class="nv">connect-to-host</span> <span class="nv">connect-to-port</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">get-data</span> <span class="nv">in</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">start-data-feeder</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">get-data</span> <span class="nv">in</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">process-data</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">in</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">get-data</span> <span class="nv">in</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">process-data</span> <span class="nv">data</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">broadcast</span> <span class="nv">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we have our data gathering and processing ready, now we need to start a tcp server and broadcast data to all clients.
We&rsquo;ll be using <em>mailboxes</em> list that will contain each client&rsquo;s mailbox and we&rsquo;ll have a separate mutex to make sure operations
on <em>mailboxes</em> list are thread-safe.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">mtx</span> <span class="p">(</span><span class="nf">make-mutex</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">mailboxes</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">broadcast</span> <span class="nv">data</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">synch</span> <span class="nv">mtx</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">mailbox</span><span class="p">)</span> <span class="p">(</span><span class="nf">thread-send</span> <span class="nv">mailbox</span> <span class="nv">data</span><span class="p">))</span> <span class="nv">mailboxes</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s write our tcp broadcasting server. Each connected client will have a his mailbox added to <em>mailboxes</em> list.
When client will disconnect, his mailbox will be deleted from <em>mailboxes</em> list. We&rsquo;ll use <em>tcp-listen</em> and <em>tcp-accept</em> functions to
listen on port and accept connections on listener. Each client will be processed by separate thread.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">broadcast-on-port</span> <span class="mi">4321</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">start-broadcasting</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">accept-client</span> <span class="p">(</span><span class="nf">tcp-listen</span> <span class="nv">broadcast-on-port</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">accept-client</span> <span class="nv">listener</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">let-values</span> <span class="p">([(</span><span class="nf">in</span> <span class="nv">out</span><span class="p">)</span> <span class="p">(</span><span class="nf">tcp-accept</span> <span class="nv">listener</span><span class="p">)])</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">thread-start!</span> <span class="p">(</span><span class="nf">make-thread</span>
</span><span class='line'>            <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">handle-exceptions</span> <span class="nv">ex</span>
</span><span class='line'>                        <span class="p">(</span><span class="nf">synch</span> <span class="nv">mtx</span> <span class="p">(</span><span class="k">set! </span><span class="nv">mailboxes</span> <span class="p">(</span><span class="nf">delete</span> <span class="p">(</span><span class="nf">current-thread</span><span class="p">)</span> <span class="nv">mailboxes</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">synch</span> <span class="nv">mtx</span> <span class="p">(</span><span class="k">set! </span><span class="nv">mailboxes</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">current-thread</span><span class="p">)</span> <span class="nv">mailboxes</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">process-client</span> <span class="nv">in</span> <span class="nv">out</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">close-output-port </span><span class="nv">out</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">close-input-port </span><span class="nv">in</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">accept-client</span> <span class="nv">listener</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">process-client</span> <span class="nv">in</span> <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">write-line</span> <span class="p">(</span><span class="nf">thread-receive</span><span class="p">)</span> <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">process-client</span> <span class="nv">in</span> <span class="nv">out</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now only thing left is to start our broadcasting server in separate thread and start feeding it data</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">thread-start!</span> <span class="p">(</span><span class="nf">make-thread</span> <span class="nv">start-broadcasting</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">start-data-feeder</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat and simple, isn&rsquo;t it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing IRC Bot using Perl 5 and POCO::IRC]]></title>
    <link href="http://troydm.github.io/blog/2013/07/22/writting-irc-bot-using-perl-5-and-poco-irc/"/>
    <updated>2013-07-22T21:29:00+04:00</updated>
    <id>http://troydm.github.io/blog/2013/07/22/writting-irc-bot-using-perl-5-and-poco-irc</id>
    <content type="html"><![CDATA[<p>Some people use <a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> to chat, some don&rsquo;t.
It was invented a really long time ago and isn&rsquo;t going away anytime soon despite some new generation alternatives popping up like <a href="http://www.jabber.org/">Jabber</a>.</p>

<p>Personally I always have my IRC client running (I&rsquo;m using <a href="http://weechat.org/">weechat</a> + <a href="http://tmux.sourceforge.net/">tmux</a>) and chat with lots of interesting people
who inspire me to try new technologies and learn something different every day. One person, who&rsquo;s nickname I won&rsquo;t name, was always telling me about how awesome <a href="http://perl.org/" title="Perl">Perl</a>
as a programming language is and how great it&rsquo;s potential is thanks to <a href="http://cpan.org" title="CPAN">CPAN</a> that has almost 124k modules for any life situation.
I always thought he was exaggerating and literally acting like a <a href="http://perl.org/" title="Perl">Perl</a> fanboy. <a href="http://perl.org/" title="Perl">Perl</a> was the first programming language I&rsquo;ve learned back in the late 90&rsquo;s
and remembering how frustrating my experience with it was and how cryptic it really was for me do something with it when I was unexperienced and lacked lots of qualities that make up a
any decent software engineer I was skeptic about using it again.
Well, time passed, time always passes, and I haven&rsquo;t written anything more than quick 50 line server scripts in <a href="http://perl.org/" title="Perl">Perl</a> for almost 13 years.
I&rsquo;ve almost forgotten everything about <a href="http://perl.org/" title="Perl">Perl</a>. Since lately I was having this crazy idea about writing IRC bot that could store and execute shell scripts on server
so I could automate my servers through IRC, I thought why not write it in <a href="http://perl.org/" title="Perl">Perl</a>. I&rsquo;ve remembered that person who was always bragging about <a href="http://perl.org/" title="Perl">Perl</a>&rsquo;s greatness wrote an IRC bot in <a href="http://perl.org/" title="Perl">Perl</a>
using <a href="https://metacpan.org/module/POE::Component::IRC" title="POCO::IRC">POE::Component::IRC</a> so I&rsquo;ve decided to try and use the same framework for my bot. It&rsquo;s based on really popular <a href="https://metacpan.org/module/POE" title="POE">POE</a> event loop framework which is very easy to learn and use.
<strong>Matt Cashner</strong> wrote a really good introduction article called <a href="http://www.perl.com/pub/2004/07/02/poeintro.html">Application Design with POE</a></p>

<!-- more -->


<p>The whole code for my bot is just 500 lines and is available from this repository <a href="https://github.com/troydm/shellbot">shellbot</a>.
I&rsquo;m going to walk through a key concepts that are essential for writing an IRC bot in <a href="https://metacpan.org/module/POE::Component::IRC" title="POCO::IRC">POCO::IRC</a> using my bot&rsquo;s source code as a reference.</p>

<p><img src="http://i.imgur.com/kiqhDBH.jpg" alt="Chobits" /></p>

<p>Before we&rsquo;ll start our <a href="http://perl.org/" title="Perl">Perl</a> IRC bot we need some way to store configuration for it. Since <a href="http://cpan.org" title="CPAN">CPAN</a> has lots of modules that deal with configuration the choice wasn&rsquo;t an easy one but
I&rsquo;ve decided to use <a href="https://metacpan.org/module/YAML">YAML</a> which is module for loading <a href="http://yaml.org" title="YAML">YAML</a> data into <a href="http://perl.org/" title="Perl">Perl</a> that can work the other way too. <a href="http://yaml.org" title="YAML">YAML</a> is a simple markup language
that is perfect for storing configuration and it&rsquo;s really quick to learn. For loading YAML configuration I&rsquo;ve used <strong>LoadFile</strong> function and to store <a href="http://perl.org/" title="Perl">Perl</a> data back into file I&rsquo;ve used <strong>DumpFile</strong> function.
Just two simple functions that do all the complex work work for me. Since I wanted to store commands in the same file I just used <a href="http://perl.org/" title="Perl">Perl</a>&rsquo;s list construct to specify that I&rsquo;m loading two separate <a href="http://yaml.org" title="YAML">YAML</a> documents.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1"># Loading configuration </span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="nv">$commands</span><span class="p">)</span> <span class="o">=</span> <span class="n">LoadFile</span><span class="p">(</span><span class="nv">$config_file</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Storing configuration</span>
</span><span class='line'><span class="n">DumpFile</span><span class="p">(</span><span class="nv">$config_file</span><span class="p">,</span> <span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="nv">$commands</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next step is to create POE Session and start event loop. Note that since my module is named Shellbot I need to specify it otherwise event loop won&rsquo;t be able to call functions.
Each of this functions are called by <a href="https://metacpan.org/module/POE" title="POE">POE</a> when specified events occur and all the bot logic is handled by those functions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nn">POE::</span><span class="n">Session</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>    <span class="n">package_states</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">Shellbot</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="sx">qw(_start _default irc_join irc_msg irc_bot_addressed irc_connected </span>
</span><span class='line'><span class="sx">                         got_job_stdout got_job_stderr got_job_close got_child_signal)</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nn">POE::</span><span class="n">Kernel</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>First event that is executed after the POE event loop starts is <strong>_start</strong> event so we need to initialize bot
state in that event. Also since <a href="https://metacpan.org/module/POE::Component::IRC" title="POCO::IRC">POCO::IRC</a> comes with some essential plugins and is modular by itself we can take advantage of this.
Instead of manually making bot reconnect when it looses connection with server I&rsquo;ve used <a href="https://metacpan.org/module/POE::Component::IRC::Plugin::Connector">Connector</a> plugin.
If we want our bot to automatically join some channel we can use <a href="https://metacpan.org/module/POE::Component::IRC::Plugin::AutoJoin">AutoJoin</a> plugin.
And to easily handle when someone addresses bot I&rsquo;ve used <a href="https://metacpan.org/module/POE::Component::IRC::Plugin::BotAddressed">BotAddressed</a> plugin.
Since I wanted my bot to handle commands I could have used <a href="https://metacpan.org/module/POE::Component::IRC::Plugin::BotCommand">BotCommand</a> plugin however I wanted my bot
to have two modes of commands so I&rsquo;ve decided to write bot command handling functions manually.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$irc</span> <span class="o">=</span> <span class="nn">POE::Component::IRC::</span><span class="n">State</span><span class="o">-&gt;</span><span class="n">spawn</span><span class="p">(</span><span class="nv">%opts</span><span class="p">);</span>
</span><span class='line'><span class="nv">$heap</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">irc</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$irc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Connector plugin</span>
</span><span class='line'><span class="nv">$heap</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">connector</span><span class="p">}</span> <span class="o">=</span> <span class="nn">POE::Component::IRC::Plugin::</span><span class="n">Connector</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'><span class="nv">$irc</span><span class="o">-&gt;</span><span class="n">plugin_add</span><span class="p">(</span> <span class="s">&#39;Connector&#39;</span> <span class="o">=&gt;</span> <span class="nv">$heap</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">connector</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Autojoin plugin</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">exists</span><span class="p">(</span><span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;channels&#39;</span><span class="p">})</span> <span class="o">&amp;&amp;</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;channels&#39;</span><span class="p">}</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="nv">$irc</span><span class="o">-&gt;</span><span class="n">plugin_add</span><span class="p">(</span><span class="s">&#39;AutoJoin&#39;</span><span class="p">,</span> <span class="nn">POE::Component::IRC::Plugin::</span><span class="n">AutoJoin</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>       <span class="n">Channels</span> <span class="o">=&gt;</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;channels&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># BotAddressed plugin</span>
</span><span class='line'><span class="nv">$irc</span><span class="o">-&gt;</span><span class="n">plugin_add</span><span class="p">(</span> <span class="s">&#39;BotAddressed&#39;</span><span class="p">,</span> <span class="nn">POE::Component::IRC::Plugin::</span><span class="n">BotAddressed</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$irc</span><span class="o">-&gt;</span><span class="n">yield</span><span class="p">(</span><span class="n">register</span> <span class="o">=&gt;</span> <span class="sx">qw(join msg connected)</span><span class="p">);</span>
</span><span class='line'><span class="nv">$irc</span><span class="o">-&gt;</span><span class="n">yield</span><span class="p">(</span><span class="s">&#39;connect&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since bot can be addressed both using a private message and refering him on a channel i&rsquo;ve decided to handle
both <strong>irc_msg</strong> and <strong>irc_bot_addressed</strong> events uniformly in <strong>msg_received</strong> function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">irc_msg</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$irc</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">SENDER</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">get_heap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@nick</span> <span class="o">=</span> <span class="p">(</span> <span class="nb">split</span> <span class="sr">/!/</span><span class="p">,</span> <span class="nv">$_</span><span class="p">[</span><span class="n">ARG0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$msg</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">ARG2</span><span class="p">];</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$heap</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">HEAP</span><span class="p">];</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$kernel</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">KERNEL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">msg_received</span> <span class="nv">$irc</span><span class="p">,</span> <span class="nv">$heap</span><span class="p">,</span> <span class="nv">$kernel</span><span class="p">,</span> <span class="nv">$nick</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$nick</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">irc_bot_addressed</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$irc</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">SENDER</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">get_heap</span><span class="p">();</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@nick</span> <span class="o">=</span> <span class="p">(</span> <span class="nb">split</span> <span class="sr">/!/</span><span class="p">,</span> <span class="nv">$_</span><span class="p">[</span><span class="n">ARG0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$channel</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">ARG1</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$msg</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">ARG2</span><span class="p">];</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$heap</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">HEAP</span><span class="p">];</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$kernel</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="n">KERNEL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">msg_received</span> <span class="nv">$irc</span><span class="p">,</span> <span class="nv">$heap</span><span class="p">,</span> <span class="nv">$kernel</span><span class="p">,</span> <span class="nv">$nick</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$nick</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$channel</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before bot accepts a command we need some way to check if person who is issuing a command is authorized to do so. I&rsquo;m doing a simple check of full IRC name
that can be specified in configuration list option <strong>authorizations</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">sub </span><span class="nf">is_authorized</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span> <span class="ow">eq</span> <span class="nv">$name</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;authorizations&#39;</span><span class="p">}</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that is left is to match commands in <strong>msg_recieved</strong> using <a href="http://perl.org/" title="Perl">Perl</a>&rsquo;s <a href="http://perldoc.perl.org/perlre.html">regex</a>. This part is just a long series of bot command logic
and <strong>if</strong> <strong>elsif</strong> <strong>else</strong> statements so I won&rsquo;t reference them here. Also the key function is <strong>run_job</strong> which executes pre-stored shell script. It creates a temporary file that
is executed using a shell</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$program</span> <span class="o">=</span> <span class="s">&quot;/bin/bash&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">exists</span><span class="p">(</span><span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;shell&#39;</span><span class="p">})){</span>
</span><span class='line'>    <span class="nv">$program</span> <span class="o">=</span> <span class="nv">$config</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;shell&#39;</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create a temporary script</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$script</span> <span class="o">=</span> <span class="nn">File::</span><span class="n">Temp</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$scriptname</span> <span class="o">=</span> <span class="nv">$script</span><span class="o">-&gt;</span><span class="n">filename</span><span class="p">;</span>
</span><span class='line'><span class="nb">chmod</span> <span class="mo">0700</span><span class="p">,</span> <span class="nv">$script</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">ref</span> <span class="nv">$cmd</span> <span class="ow">eq</span> <span class="s">&#39;ARRAY&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$line</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span> <span class="nv">$cmd</span> <span class="p">}){</span>
</span><span class='line'>        <span class="k">print</span> <span class="nv">$script</span> <span class="s">&quot;$line\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">print</span> <span class="nv">$script</span> <span class="nv">$cmd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$program</span> <span class="o">.=</span> <span class="s">&quot; $scriptname $args&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shell execution is handled by <a href="https://metacpan.org/module/POE::Component::IRC" title="POCO::IRC">POE</a> using <a href="https://metacpan.org/module/POE::Wheel::Run">POE::Wheel::Run</a>
and output from shell is received on <strong>got_job_stdout</strong> and <strong>got_job_stderr</strong> functions</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$job</span> <span class="o">=</span> <span class="nn">POE::Wheel::</span><span class="n">Run</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Program</span>      <span class="o">=&gt;</span> <span class="nv">$program</span><span class="p">,</span>
</span><span class='line'>    <span class="n">StdioFilter</span>  <span class="o">=&gt;</span> <span class="nn">POE::Filter::</span><span class="n">Line</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">StderrFilter</span> <span class="o">=&gt;</span> <span class="nn">POE::Filter::</span><span class="n">Line</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(),</span>
</span><span class='line'>    <span class="n">StdoutEvent</span>  <span class="o">=&gt;</span> <span class="s">&quot;got_job_stdout&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">StderrEvent</span>  <span class="o">=&gt;</span> <span class="s">&quot;got_job_stderr&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CloseEvent</span>   <span class="o">=&gt;</span> <span class="s">&quot;got_job_close&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. To install and trying it out just look through a <a href="https://github.com/troydm/shellbot/blob/master/README.md">readme</a></p>

<p>Offcourse making a temporary shell script and executing it is generally unsafe. Also there is security concern
that bot can be somehow hacked and commanded by unauthorized nick but I&rsquo;m not sure how can this be done without changing vhost.
That is why I called this bot a potentially unsafe. If anyone can find any security holes please do pull request or just email me patch.</p>

<p>To make this bot little more secure we need to make him connect to IRC using SSL. For this I&rsquo;ll walk through a general steps for configuring
<a href="https://www.freenode.net/certfp/">CertFP</a> and generating self signed certificate for <a href="https://www.freenode.net/">Freenode</a> as an example.
First step is to register your bot&rsquo;s nick with <a href="https://blog.freenode.net/2007/03/nickserv-is-your-friend/">NickServ</a>.
Choose a nickname for your bot and start it up. Ask your bot to register with NickServ by private messaging him on IRC.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/msg botnick msg NickServ REGISTER nickservpass email@address.com</span></code></pre></td></tr></table></div></figure>


<p>Shortly you&rsquo;ll receive an email verification that will include verification code, privately message your bot again to verify your registration</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/msg botnick msg NickServ VERIFY REGISTER botnick verificationcode</span></code></pre></td></tr></table></div></figure>


<p>Now your bot&rsquo;s nick is registered with NickServ so edit your configuration file and uncomment nickserv line to specify your nickservpass that will
be used each time your bot will connect to server for authorization of your nick</p>

<p>Now we&rsquo;ll generate a self signed certificate for SSL, i&rsquo;ve used <a href="https://www.freenode.net/certfp/makecert.shtml">this</a> manual for reference.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>umask 077
</span><span class='line'>openssl req -newkey rsa:2048 -days 730 -x509 -keyout botnick.key -out botnick.crt</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll be asked some questions and after that openssl will generate two files, your bot&rsquo;s certificate and key.
For CertFP to work we need a fingerprint of your key and certificate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat botnick.crt botnick.key > botnick.pem
</span><span class='line'>openssl x509 -sha1 -noout -fingerprint -in botnick.pem | sed -e 's/^.*=//;s/://g;y/ABCDEF/abcdef/'</span></code></pre></td></tr></table></div></figure>


<p>After this you&rsquo;ll get a fingerprint that you need to add to NickServ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/msg botnick msg NickServ CERT ADD fingerprint</span></code></pre></td></tr></table></div></figure>


<p>Now all that is left is to specify in configuration that we are connecting using SSL certificate and key.
Just uncomment <strong>sslcrt</strong> and <strong>sslkey</strong> options and specify full path to your bot&rsquo;s certificate and key.
Also don&rsquo;t forget to change the port since we need to specify an SSL port instead of usual one, just specify
<strong>6697</strong>, <strong>7000</strong> or <strong>7070</strong> and restart your bot to enjoy fully secured connection to irc server.
Also i&rsquo;ve used <a href="https://metacpan.org/module/DETI/Proc-Daemon-0.14/lib/Proc/Daemon.pod">Proc::Daemon</a> for running this bot
as daemon so you can uncomment <strong>daemon</strong> and <strong>log</strong> options to run it as daemon process.</p>

<p>So what did i learned from writing this small irc bot in <a href="http://perl.org/" title="Perl">Perl</a>?
Now the first most common mistake i was always making when coding in <a href="http://perl.org/" title="Perl">Perl</a> was the difference between list and array, so
I recommend this article by <strong>Mike Friedman</strong> <a href="http://friedo.com/blog/2013/07/arrays-vs-lists-in-perl">Arrays vs. Lists in Perl</a>
that helped me a lot. Also dereferncing was the second most common mistake i had, until i&rsquo;ve read this article
<a href="http://perlmeme.org/howtos/using_perl/dereferencing.html">Dereferencing in Perl</a>. But the biggest thing i&rsquo;ve learned was that <a href="http://perl.org/" title="Perl">Perl</a>
as a scripting language is really easy to use and powerfull despite some people claiming it&rsquo;s dead, it&rsquo;s still alive and it&rsquo;s doing
just <a href="http://www.nntp.perl.org/group/perl.perl5.porters/2013/07/msg204905.html">fine</a>!
Just look how many modules are released on <a href="http://cpan.org" title="CPAN">CPAN</a> everyday! And it&rsquo;s really really fun to code in, so everyone should try learning and using it!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosting your own remote private torrent tracker]]></title>
    <link href="http://troydm.github.io/blog/2013/04/24/hosting-your-own-remote-private-torrent-tracker/"/>
    <updated>2013-04-24T22:05:00+04:00</updated>
    <id>http://troydm.github.io/blog/2013/04/24/hosting-your-own-remote-private-torrent-tracker</id>
    <content type="html"><![CDATA[<p>Ever wanted to share a really big file (more than 4 GB) with someone without a hassle of uploading it to some file upload server?</p>

<p><a href="http://bittorrent.org/">BitTorrent</a> to rescue, also there are alternatives like hosting your own ftp/sftp file server but I won&rsquo;t consider them here!
So you probably already have a dedicated home file server running on Linux/BSD/Solaris that also has a torrent client installed on it that you access through web interface?</p>

<p>Oh you don&rsquo;t? Snap it&rsquo;s it&rsquo;s so useful that nowadays almost everyone has some kind of NAS that he/she is using for file storage and torrents.
So if you don&rsquo;t have one then you are behind of times</p>

<p>So what do we need to share some file over torrent? Yes indeed we need a torrent tracker</p>

<!-- more -->


<p><a href="http://thepiratebay.se"><img src="https://thepiratebay.se/static/img/tpb.jpg" alt="The Pirate Bay" /></a></p>

<p>You probably heard of the famous pirate bay arrr!&hellip; haven&rsquo;t you?
Well pirate bay has a torrent tracker and you don&rsquo;t. So you either have a choice and become a pirate bay resident and upload your torrent on their site
or you can host your own little pirate bay just for you and your friends only</p>

<p>Most torrent clients include torrent tracker functionality out of the box but let&rsquo;s consider our little case were we a have headless home server with torrent client
that has only web interface and no torrent tracker
So what do we do? We run our own standalone torrent tracker!</p>

<p>So that&rsquo;s how I&rsquo;ve ended on <a href="http://en.wikipedia.org/wiki/Comparison_of_BitTorrent_tracker_software">this page</a></p>

<p>My first choice was <a href="https://erdgeist.org/arts/software/opentracker/">opentracker</a> which is a very popular tracker that even pirate bay uses on their servers.
First thing I did I&rsquo;ve compiled and configured it in few mins and had it running on my <strong>6969</strong> port.
So the next thing I&rsquo;ve created a torrent with my torrent tracker announce url specified as **<a href="http://192.168.0.x:6969/announce**">http://192.168.0.x:6969/announce**</a> using <a href="http://mktorrent.sourceforge.net/">mktorrent</a>
and added it to my torrent client which started seeding it right away. The next step I&rsquo;ve created the same torrent file with announce url changed to my external ip and sent it to my friend!
My friend started his torrent client and added the torrent. He could see that it had one seeder but still couldn&rsquo;t download the file. Simple troubleshooting revealed that my torrent tracker
was listing my seeder peer with a local network ip address that my friend&rsquo;s torrent client couldn&rsquo;t connect to&hellip;</p>

<p><img src="http://i.imgur.com/TCYjoCe.jpg" alt="Crying Loli" /></p>

<p>I knew now what I needed from torrent tracker. My port was the same but my ip address should be external instead of internal.
I needed local ip substituted with remote ip for all external network peers. The peer port would remain the same since i have the same port forwarded.</p>

<p>Unfortunately I couldn&rsquo;t find any functionality in <a href="https://erdgeist.org/arts/software/opentracker/">opentracker</a> that would do that :(</p>

<p>So next thing I did I&rsquo;ve downloaded <a href="https://code.google.com/p/udpt/">udpt</a> and had it compiled.
It uses <a href="http://www.bittorrent.org/beps/bep_0015.html">udp tracker protocol</a> which is much more
network efficient. <a href="https://code.google.com/p/udpt/">udpt</a> is much more smaller than <a href="https://erdgeist.org/arts/software/opentracker/">opentracker</a>
in both source code and functionality and thus was ideal to experiment with.</p>

<p>Adding the needed functionality didn&rsquo;t solved my problem because udpt had some other bugs that I had to track down but in a few hours i had everything up and working!
In the end I had a fully working private torrent tracker that was doing what I was hoping for.
I&rsquo;ve even added code to run it as linux daemon thanks to <a href="http://www.netzmafia.de/skripten/unix/linux-daemon-howto.html">this little howto</a></p>

<p>My experimental fork is at <a href="https://github.com/troydm/udpt">this repository</a></p>

<p><img src="http://i.imgur.com/M6W7RfM.png" alt="Pirate Loli" /></p>

<p>Happy torrenting pirates!</p>
]]></content>
  </entry>
  
</feed>
